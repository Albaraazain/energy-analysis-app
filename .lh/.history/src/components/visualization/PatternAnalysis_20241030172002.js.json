{
    "sourceFile": ".history/src/components/visualization/PatternAnalysis_20241030172002.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1730299947984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1730299947984,
            "name": "Commit-0",
            "content": "# File: src/components/visualization/PatternAnalysis.js\r\n\r\nimport React, { useState } from 'react';\r\nimport { Card } from '../components/ui/card';\r\nimport {\r\n  ResponsiveContainer,\r\n  ScatterChart,\r\n  Scatter,\r\n  XAxis,\r\n  YAxis,\r\n  ZAxis,\r\n  Tooltip,\r\n  Cell\r\n} from 'recharts';\r\n\r\nconst PatternAnalysis = ({ data, height = 400 }) => {\r\n  const [selectedPattern, setSelectedPattern] = useState(null);\r\n\r\n  // Process data for pattern visualization\r\n  const processData = (rawData) => {\r\n    // Group by hour and day of week\r\n    const patterns = rawData.reduce((acc, reading) => {\r\n      const date = new Date(reading.timestamp);\r\n      const hour = date.getHours();\r\n      const day = date.getDay();\r\n      \r\n      if (!acc[`${day}-${hour}`]) {\r\n        acc[`${day}-${hour}`] = {\r\n          day,\r\n          hour,\r\n          readings: []\r\n        };\r\n      }\r\n      \r\n      acc[`${day}-${hour}`].readings.push(reading.consumption);\r\n      return acc;\r\n    }, {});\r\n\r\n    // Calculate averages and variations\r\n    return Object.values(patterns).map(pattern => ({\r\n      day: pattern.day,\r\n      hour: pattern.hour,\r\n      value: pattern.readings.reduce((a, b) => a + b, 0) / pattern.readings.length,\r\n      variance: calculateVariance(pattern.readings)\r\n    }));\r\n  };\r\n\r\n  const calculateVariance = (readings) => {\r\n    const mean = readings.reduce((a, b) => a + b, 0) / readings.length;\r\n    return readings.reduce((acc, val) => acc + Math.pow(val - mean, 2), 0) / readings.length;\r\n  };\r\n\r\n  const getPatternColor = (value, variance) => {\r\n    // Color based on consumption value and variance\r\n    const hue = Math.max(0, Math.min(240, (1 - value / 10) * 240)); // Blue to Red\r\n    const saturation = Math.min(100, variance * 50 + 50); // More saturated = more variable\r\n    return `hsl(${hue}, ${saturation}%, 50%)`;\r\n  };\r\n\r\n  const formatDayLabel = (day) => {\r\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    return days[day];\r\n  };\r\n\r\n  const formatHourLabel = (hour) => {\r\n    return `${hour}:00`;\r\n  };\r\n\r\n  const patternData = processData(data);\r\n\r\n  return (\r\n    <Card className=\"p-4\">\r\n      <div className=\"mb-4\">\r\n        <h3 className=\"text-lg font-semibold text-gray-900\">Usage Patterns</h3>\r\n        <p className=\"text-sm text-gray-500\">\r\n          Darker colors indicate higher consumption, size indicates variability\r\n        </p>\r\n      </div>\r\n\r\n      <div style={{ height: `${height}px` }}>\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n          <ScatterChart\r\n            margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\r\n          >\r\n            <XAxis\r\n              dataKey=\"hour\"\r\n              name=\"Hour\"\r\n              tickFormatter={formatHourLabel}\r\n              type=\"number\"\r\n              domain={[0, 23]}\r\n            />\r\n            <YAxis\r\n              dataKey=\"day\"\r\n              name=\"Day\"\r\n              tickFormatter={formatDayLabel}\r\n              type=\"number\"\r\n              domain={[0, 6]}\r\n            />\r\n            <ZAxis\r\n              dataKey=\"variance\"\r\n              range={[50, 400]}\r\n              name=\"Variance\"\r\n            />\r\n            <Tooltip\r\n              cursor={{ strokeDasharray: '3 3' }}\r\n              content={({ payload }) => {\r\n                if (!payload || !payload[0]) return null;\r\n                const data = payload[0].payload;\r\n                return (\r\n                  <div className=\"bg-white p-2 shadow rounded border\">\r\n                    <p className=\"font-medium\">\r\n                      {formatDayLabel(data.day)} at {formatHourLabel(data.hour)}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      Average: {data.value.toFixed(2)} kWh\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-600\">\r\n                      Variance: {data.variance.toFixed(2)}\r\n                    </p>\r\n                  </div>\r\n                );\r\n              }}\r\n            />\r\n            <Scatter data={patternData} shape=\"circle\">\r\n              {patternData.map((entry, index) => (\r\n                <Cell\r\n                  key={index}\r\n                  fill={getPatternColor(entry.value, entry.variance)}\r\n                  onClick={() => setSelectedPattern(entry)}\r\n                />\r\n              ))}\r\n            </Scatter>\r\n          </ScatterChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n\r\n      {/* Pattern Details */}\r\n      {selectedPattern && (\r\n        <div className=\"mt-4 p-4 bg-gray-50 rounded-lg\">\r\n          <h4 className=\"font-medium text-gray-900\">\r\n            Pattern Details: {formatDayLabel(selectedPattern.day)} at {formatHourLabel(selectedPattern.hour)}\r\n          </h4>\r\n          <div className=\"mt-2 space-y-1 text-sm text-gray-600\">\r\n            <p>Average Consumption: {selectedPattern.value.toFixed(2)} kWh</p>\r\n            <p>Variability: {\r\n              selectedPattern.variance < 0.1 ? 'Very Consistent' :\r\n              selectedPattern.variance < 0.3 ? 'Somewhat Variable' :\r\n              'Highly Variable'\r\n            }</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PatternAnalysis;"
        }
    ]
}