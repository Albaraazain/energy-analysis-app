{
    "sourceFile": "utils/data-utils.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1730291235623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730299916715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,11 @@\n+// Date Utilities:\r\n+\r\n+// Flexible date formatting\r\n+// Date range handling\r\n+// Time period grouping\r\n+// Relative date parsing\r\n+\r\n // Format a date to a readable string\r\n export const formatDate = (date) => {\r\n     return new Intl.DateTimeFormat('en-US', {\r\n       weekday: 'short',\r\n"
                }
            ],
            "date": 1730291235623,
            "name": "Commit-0",
            "content": "// Format a date to a readable string\r\nexport const formatDate = (date) => {\r\n    return new Intl.DateTimeFormat('en-US', {\r\n      weekday: 'short',\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: 'numeric',\r\n      minute: 'numeric'\r\n    }).format(date);\r\n  };\r\n  \r\n  // Format time only (HH:MM)\r\n  export const formatTime = (date) => {\r\n    return new Intl.DateTimeFormat('en-US', {\r\n      hour: 'numeric',\r\n      minute: 'numeric'\r\n    }).format(date);\r\n  };\r\n  \r\n  // Get the start of the day\r\n  export const getStartOfDay = (date) => {\r\n    const newDate = new Date(date);\r\n    newDate.setHours(0, 0, 0, 0);\r\n    return newDate;\r\n  };\r\n  \r\n  // Get the end of the day\r\n  export const getEndOfDay = (date) => {\r\n    const newDate = new Date(date);\r\n    newDate.setHours(23, 59, 59, 999);\r\n    return newDate;\r\n  };\r\n  \r\n  // Get date range for various time periods\r\n  export const getDateRange = (period) => {\r\n    const now = new Date();\r\n    const ranges = {\r\n      today: {\r\n        start: getStartOfDay(now),\r\n        end: getEndOfDay(now)\r\n      },\r\n      yesterday: {\r\n        start: getStartOfDay(new Date(now.setDate(now.getDate() - 1))),\r\n        end: getEndOfDay(new Date(now))\r\n      },\r\n      lastWeek: {\r\n        start: getStartOfDay(new Date(now.setDate(now.getDate() - 7))),\r\n        end: getEndOfDay(new Date())\r\n      },\r\n      lastMonth: {\r\n        start: getStartOfDay(new Date(now.setMonth(now.getMonth() - 1))),\r\n        end: getEndOfDay(new Date())\r\n      }\r\n    };\r\n  \r\n    return ranges[period] || null;\r\n  };\r\n  \r\n  // Check if a date is within a range\r\n  export const isDateInRange = (date, startDate, endDate) => {\r\n    const checkDate = new Date(date);\r\n    return checkDate >= startDate && checkDate <= endDate;\r\n  };\r\n  \r\n  // Group dates by a specific interval (hour, day, week, month)\r\n  export const groupDatesByInterval = (dates, interval) => {\r\n    return dates.reduce((groups, date) => {\r\n      let key;\r\n      const dateObj = new Date(date);\r\n  \r\n      switch (interval) {\r\n        case 'hour':\r\n          key = dateObj.setMinutes(0, 0, 0);\r\n          break;\r\n        case 'day':\r\n          key = getStartOfDay(dateObj).getTime();\r\n          break;\r\n        case 'week':\r\n          const startOfWeek = new Date(dateObj);\r\n          startOfWeek.setDate(dateObj.getDate() - dateObj.getDay());\r\n          key = getStartOfDay(startOfWeek).getTime();\r\n          break;\r\n        case 'month':\r\n          key = new Date(dateObj.getFullYear(), dateObj.getMonth(), 1).getTime();\r\n          break;\r\n        default:\r\n          key = dateObj.getTime();\r\n      }\r\n  \r\n      if (!groups[key]) {\r\n        groups[key] = [];\r\n      }\r\n      groups[key].push(date);\r\n      return groups;\r\n    }, {});\r\n  };\r\n  \r\n  // Parse flexible date strings\r\n  export const parseFlexibleDate = (dateString) => {\r\n    // Handle relative date strings\r\n    const relativeDates = {\r\n      'yesterday': () => {\r\n        const date = new Date();\r\n        date.setDate(date.getDate() - 1);\r\n        return date;\r\n      },\r\n      'last night': () => {\r\n        const date = new Date();\r\n        date.setDate(date.getDate() - 1);\r\n        date.setHours(20, 0, 0, 0); // Assuming night starts at 8 PM\r\n        return date;\r\n      },\r\n      'this morning': () => {\r\n        const date = new Date();\r\n        date.setHours(6, 0, 0, 0); // Assuming morning starts at 6 AM\r\n        return date;\r\n      }\r\n    };\r\n  \r\n    const lowercaseInput = dateString.toLowerCase();\r\n    \r\n    // Check for relative dates\r\n    for (const [key, handler] of Object.entries(relativeDates)) {\r\n      if (lowercaseInput.includes(key)) {\r\n        return handler();\r\n      }\r\n    }\r\n  \r\n    // If not a relative date, try parsing as regular date\r\n    const parsedDate = new Date(dateString);\r\n    return isNaN(parsedDate.getTime()) ? null : parsedDate;\r\n  };"
        }
    ]
}