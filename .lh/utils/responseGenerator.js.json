{
    "sourceFile": "utils/responseGenerator.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1730297100744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730299916660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,21 @@\n-# File: src/utils/responseGenerator.js\r\n+// ResponseGenerator Class:\r\n \r\n+// Template-based response generation\r\n+// Natural language formatting\r\n+// Multi-part response structure\r\n+// Insight formatting\r\n+// Recommendation generation\r\n+\r\n+\r\n+// Response Features:\r\n+\r\n+// Context-aware responses\r\n+// Dynamic template selection\r\n+// Value formatting\r\n+// Insight prioritization\r\n+// Natural language generation\r\n+\r\n class ResponseGenerator {\r\n   constructor() {\r\n     this.templates = {\r\n       usage: {\r\n"
                }
            ],
            "date": 1730297100744,
            "name": "Commit-0",
            "content": "# File: src/utils/responseGenerator.js\r\n\r\nclass ResponseGenerator {\r\n  constructor() {\r\n    this.templates = {\r\n      usage: {\r\n        high: \"Your energy consumption during this period was relatively high at {value} kWh, which is {percentage}% above your typical usage.\",\r\n        low: \"Your energy consumption was lower than usual at {value} kWh, {percentage}% below your typical usage.\",\r\n        normal: \"Your energy consumption of {value} kWh was within normal range, just {percentage}% {direction} your typical usage.\"\r\n      },\r\n      comparison: {\r\n        increase: \"There was an increase of {percentage}% compared to {compareWith}.\",\r\n        decrease: \"There was a decrease of {percentage}% compared to {compareWith}.\",\r\n        noChange: \"Usage remained stable compared to {compareWith}, with only a {percentage}% difference.\"\r\n      },\r\n      pattern: {\r\n        peak: \"Peak usage typically occurs between {startTime} and {endTime}, averaging {value} kWh.\",\r\n        lowest: \"Lowest consumption is usually between {startTime} and {endTime}, averaging {value} kWh.\",\r\n        consistent: \"Usage is most consistent during {timeRange}, varying by only {variation}%.\"\r\n      }\r\n    };\r\n  }\r\n\r\n  generateResponse(analysis, queryType) {\r\n    const parts = [];\r\n    \r\n    // Main response based on analysis type\r\n    parts.push(this.generateMainResponse(analysis, queryType));\r\n    \r\n    // Add insights if available\r\n    if (analysis.insights?.length > 0) {\r\n      parts.push(this.generateInsights(analysis.insights));\r\n    }\r\n    \r\n    // Add recommendations if applicable\r\n    if (analysis.recommendations?.length > 0) {\r\n      parts.push(this.generateRecommendations(analysis.recommendations));\r\n    }\r\n\r\n    return parts.filter(Boolean).join(' ');\r\n  }\r\n\r\n  generateMainResponse(analysis, queryType) {\r\n    const { summary } = analysis;\r\n    \r\n    switch (queryType) {\r\n      case 'usage_inquiry':\r\n        return this.generateUsageResponse(summary);\r\n      case 'comparison':\r\n        return this.generateComparisonResponse(summary);\r\n      case 'pattern':\r\n        return this.generatePatternResponse(summary);\r\n      default:\r\n        return this.generateGeneralResponse(summary);\r\n    }\r\n  }\r\n\r\n  formatValue(value, type = 'number') {\r\n    switch (type) {\r\n      case 'percentage':\r\n        return Math.abs(Number(value)).toFixed(1) + '%';\r\n      case 'energy':\r\n        return Number(value).toFixed(2) + ' kWh';\r\n      case 'time':\r\n        return new Date(value).toLocaleTimeString([], { \r\n          hour: 'numeric', \r\n          minute: '2-digit' \r\n        });\r\n      default:\r\n        return Number(value).toFixed(2);\r\n    }\r\n  }\r\n\r\n  generateUsageResponse(summary) {\r\n    const percentage = ((summary.actual - summary.expected) / summary.expected) * 100;\r\n    const template = this.templates.usage[\r\n      percentage > 10 ? 'high' : \r\n      percentage < -10 ? 'low' : \r\n      'normal'\r\n    ];\r\n\r\n    return template.replace(\r\n      {\r\n        '{value}': this.formatValue(summary.actual, 'energy'),\r\n        '{percentage}': this.formatValue(Math.abs(percentage), 'percentage'),\r\n        '{direction}': percentage > 0 ? 'above' : 'below'\r\n      }\r\n    );\r\n  }\r\n\r\n  generateComparisonResponse(summary) {\r\n    const percentage = summary.percentageChange;\r\n    const template = this.templates.comparison[\r\n      percentage > 5 ? 'increase' :\r\n      percentage < -5 ? 'decrease' :\r\n      'noChange'\r\n    ];\r\n\r\n    return template.replace(\r\n      {\r\n        '{percentage}': this.formatValue(Math.abs(percentage), 'percentage'),\r\n        '{compareWith}': summary.comparisonPeriod\r\n      }\r\n    );\r\n  }\r\n\r\n  generatePatternResponse(summary) {\r\n    const { patterns } = summary;\r\n    const responses = [];\r\n\r\n    if (patterns.peak) {\r\n      responses.push(this.templates.pattern.peak.replace({\r\n        '{startTime}': this.formatValue(patterns.peak.start, 'time'),\r\n        '{endTime}': this.formatValue(patterns.peak.end, 'time'),\r\n        '{value}': this.formatValue(patterns.peak.average, 'energy')\r\n      }));\r\n    }\r\n\r\n    if (patterns.lowest) {\r\n      responses.push(this.templates.pattern.lowest.replace({\r\n        '{startTime}': this.formatValue(patterns.lowest.start, 'time'),\r\n        '{endTime}': this.formatValue(patterns.lowest.end, 'time'),\r\n        '{value}': this.formatValue(patterns.lowest.average, 'energy')\r\n      }));\r\n    }\r\n\r\n    return responses.join(' ');\r\n  }\r\n\r\n  generateGeneralResponse(summary) {\r\n    return `Your total energy consumption was ${this.formatValue(summary.total, 'energy')}, \r\n      with an average of ${this.formatValue(summary.average, 'energy')} per hour.`;\r\n  }\r\n\r\n  generateInsights(insights) {\r\n    if (!insights?.length) return '';\r\n\r\n    // Sort insights by confidence/importance\r\n    const sortedInsights = [...insights].sort((a, b) => b.confidence - a.confidence);\r\n\r\n    // Take top 3 most relevant insights\r\n    return sortedInsights.slice(0, 3)\r\n      .map(insight => this.formatInsight(insight))\r\n      .join(' ');\r\n  }\r\n\r\n  formatInsight(insight) {\r\n    switch (insight.type) {\r\n      case 'trend':\r\n        return `There's a ${insight.confidence > 0.8 ? 'clear' : 'noticeable'} ${insight.direction} trend in your consumption.`;\r\n      case 'anomaly':\r\n        return `Unusual consumption was detected ${this.formatValue(insight.timestamp, 'time')}.`;\r\n      case 'pattern':\r\n        return insight.description;\r\n      default:\r\n        return insight.description;\r\n    }\r\n  }\r\n\r\n  generateRecommendations(recommendations) {\r\n    if (!recommendations?.length) return '';\r\n\r\n    return 'Recommendations: ' + recommendations\r\n      .map(rec => `${rec.description}${rec.savingPotential ? ` (potential saving: ${this.formatValue(rec.savingPotential, 'percentage')})` : ''}`)\r\n      .join(' ');\r\n  }\r\n\r\n  // Helper method to replace multiple placeholders in a template\r\n  replace(template, replacements) {\r\n    return Object.entries(replacements).reduce(\r\n      (str, [key, value]) => str.replace(key, value),\r\n      template\r\n    );\r\n  }\r\n}\r\n\r\nexport default new ResponseGenerator();"
        }
    ]
}