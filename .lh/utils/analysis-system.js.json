{
    "sourceFile": "utils/analysis-system.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1730290950143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730299916703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,17 @@\n // File: src/utils/analysis-system.js\r\n \r\n+// Analysis Features:\r\n+\r\n+// Total and average consumption\r\n+// Statistical measures (min, max, median, quartiles)\r\n+// Moving averages\r\n+// Trend detection with confidence levels\r\n+// Volatility analysis\r\n+\r\n+\r\n+\r\n+\r\n import _ from 'lodash';\r\n \r\n class EnergyAnalysisSystem {\r\n   constructor(data) {\r\n"
                }
            ],
            "date": 1730290950143,
            "name": "Commit-0",
            "content": "// File: src/utils/analysis-system.js\r\n\r\nimport _ from 'lodash';\r\n\r\nclass EnergyAnalysisSystem {\r\n  constructor(data) {\r\n    this.data = data;\r\n  }\r\n\r\n  // Extract date range from user query\r\n  extractDateRange(query) {\r\n    // Examples:\r\n    // \"last weekend\" -> extract last weekend's dates\r\n    // \"yesterday\" -> extract yesterday's dates\r\n    // \"last night\" -> extract last night's hours\r\n    // \"january 5th\" -> extract specific date\r\n    // If no specific date is mentioned, return null\r\n    \r\n    const today = new Date();\r\n    const lowercaseQuery = query.toLowerCase();\r\n\r\n    if (lowercaseQuery.includes('yesterday')) {\r\n      const yesterday = new Date(today);\r\n      yesterday.setDate(yesterday.getDate() - 1);\r\n      return {\r\n        start: new Date(yesterday.setHours(0, 0, 0, 0)),\r\n        end: new Date(yesterday.setHours(23, 59, 59, 999))\r\n      };\r\n    }\r\n\r\n    if (lowercaseQuery.includes('last night')) {\r\n      const yesterday = new Date(today);\r\n      yesterday.setDate(yesterday.getDate() - 1);\r\n      return {\r\n        start: new Date(yesterday.setHours(18, 0, 0, 0)),\r\n        end: new Date(yesterday.setHours(23, 59, 59, 999))\r\n      };\r\n    }\r\n\r\n    if (lowercaseQuery.includes('last weekend')) {\r\n      const lastWeekend = new Date(today);\r\n      lastWeekend.setDate(lastWeekend.getDate() - (lastWeekend.getDay() + 1));\r\n      return {\r\n        start: new Date(lastWeekend.setHours(0, 0, 0, 0)),\r\n        end: new Date(lastWeekend.setDate(lastWeekend.getDate() + 1))\r\n      };\r\n    }\r\n\r\n    // Add more date extraction patterns as needed\r\n    return null;\r\n  }\r\n\r\n  // Get data for a specific time range\r\n  getDataForRange(startTime, endTime) {\r\n    return this.data.filter(reading => {\r\n      const timestamp = new Date(reading.timestamp);\r\n      return timestamp >= startTime && timestamp <= endTime;\r\n    });\r\n  }\r\n\r\n  // Calculate baseline (typical usage) for comparison\r\n  calculateBaseline(timeRange) {\r\n    // Group all data by hour of day to find typical patterns\r\n    const hourlyAverages = _.chain(this.data)\r\n      .groupBy(reading => new Date(reading.timestamp).getHours())\r\n      .mapValues(readings => {\r\n        const sum = _.sumBy(readings, 'consumption');\r\n        return sum / readings.length;\r\n      })\r\n      .value();\r\n\r\n    return hourlyAverages;\r\n  }\r\n\r\n  // Analyze consumption for a specific period\r\n  analyzeConsumption(startTime, endTime) {\r\n    const periodData = this.getDataForRange(startTime, endTime);\r\n    const baseline = this.calculateBaseline();\r\n\r\n    // Calculate actual consumption\r\n    const actualConsumption = _.sumBy(periodData, 'consumption');\r\n\r\n    // Calculate expected consumption based on baseline\r\n    let expectedConsumption = 0;\r\n    periodData.forEach(reading => {\r\n      const hour = new Date(reading.timestamp).getHours();\r\n      expectedConsumption += baseline[hour] || 0;\r\n    });\r\n\r\n    // Calculate the difference\r\n    const difference = actualConsumption - expectedConsumption;\r\n    const percentageDifference = (difference / expectedConsumption) * 100;\r\n\r\n    return {\r\n      actualConsumption,\r\n      expectedConsumption,\r\n      difference,\r\n      percentageDifference,\r\n      hourlyBreakdown: periodData,\r\n      timeRange: { start: startTime, end: endTime }\r\n    };\r\n  }\r\n\r\n  // Generate a natural language response\r\n  generateResponse(query) {\r\n    // First, try to extract a date range from the query\r\n    const dateRange = this.extractDateRange(query);\r\n    \r\n    if (!dateRange) {\r\n      // If no specific date range found, provide general statistics\r\n      const totalConsumption = _.sumBy(this.data, 'consumption');\r\n      const avgConsumption = totalConsumption / this.data.length;\r\n      \r\n      return {\r\n        message: `Based on your available data, your average hourly consumption is ${avgConsumption.toFixed(2)} kWh. To analyze a specific period, please mention when it occurred (e.g., \"yesterday\", \"last weekend\", \"last night\").`,\r\n        data: {\r\n          averageConsumption: avgConsumption,\r\n          totalConsumption: totalConsumption\r\n        }\r\n      };\r\n    }\r\n\r\n    // Analyze the specified period\r\n    const analysis = this.analyzeConsumption(dateRange.start, dateRange.end);\r\n    \r\n    let response = `During this period, your energy consumption was ${analysis.actualConsumption.toFixed(2)} kWh, `;\r\n    \r\n    if (analysis.difference > 0) {\r\n      response += `which is ${Math.abs(analysis.percentageDifference).toFixed(1)}% higher than typical usage.`;\r\n    } else {\r\n      response += `which is ${Math.abs(analysis.percentageDifference).toFixed(1)}% lower than typical usage.`;\r\n    }\r\n\r\n    return {\r\n      message: response,\r\n      data: analysis\r\n    };\r\n  }\r\n}\r\n\r\nexport default EnergyAnalysisSystem;"
        }
    ]
}