{
    "sourceFile": "utils/analysis-engine.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1730290577965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1730290577965,
            "name": "Commit-0",
            "content": "// utils/analysis-engine.js\r\nimport _ from 'lodash';\r\nimport { parseTimestamp, formatDate } from './date-utils';\r\n\r\nclass EnergyAnalysisEngine {\r\n  constructor(data) {\r\n    this.data = data;\r\n    this.baselineCache = new Map(); // Cache for baseline calculations\r\n  }\r\n\r\n  // Get consumption for a specific time range\r\n  getConsumptionInRange(startTime, endTime) {\r\n    return this.data.filter(reading => {\r\n      const timestamp = parseTimestamp(reading.timestamp);\r\n      return timestamp >= startTime && timestamp <= endTime;\r\n    });\r\n  }\r\n\r\n  // Calculate baseline consumption (typical usage pattern)\r\n  calculateBaseline(timeRange) {\r\n    const cacheKey = `${timeRange.start}-${timeRange.end}`;\r\n    \r\n    if (this.baselineCache.has(cacheKey)) {\r\n      return this.baselineCache.get(cacheKey);\r\n    }\r\n\r\n    // Group by hour of day to find typical patterns\r\n    const hourlyAverages = _.chain(this.data)\r\n      .groupBy(reading => {\r\n        const date = parseTimestamp(reading.timestamp);\r\n        return date.getHours();\r\n      })\r\n      .mapValues(readings => {\r\n        const sum = _.sumBy(readings, 'consumption');\r\n        return sum / readings.length;\r\n      })\r\n      .value();\r\n\r\n    this.baselineCache.set(cacheKey, hourlyAverages);\r\n    return hourlyAverages;\r\n  }\r\n\r\n  // Analyze consumption during an event\r\n  analyzeEvent(eventStart, eventEnd) {\r\n    const eventData = this.getConsumptionInRange(eventStart, eventEnd);\r\n    const eventTotal = _.sumBy(eventData, 'consumption');\r\n    \r\n    // Get baseline for comparison\r\n    const baseline = this.calculateBaseline({ start: eventStart, end: eventEnd });\r\n    const eventHours = Math.ceil((eventEnd - eventStart) / (1000 * 60 * 60));\r\n    \r\n    let baselineTotal = 0;\r\n    for (let hour = eventStart.getHours(); hour < eventStart.getHours() + eventHours; hour++) {\r\n      baselineTotal += baseline[hour % 24] || 0;\r\n    }\r\n\r\n    return {\r\n      eventConsumption: eventTotal,\r\n      baselineConsumption: baselineTotal,\r\n      difference: eventTotal - baselineTotal,\r\n      percentageIncrease: ((eventTotal - baselineTotal) / baselineTotal) * 100,\r\n      hourlyBreakdown: eventData\r\n    };\r\n  }\r\n\r\n  // Find significant consumption patterns\r\n  findPatterns() {\r\n    const dailyConsumption = _.chain(this.data)\r\n      .groupBy(reading => {\r\n        const date = parseTimestamp(reading.timestamp);\r\n        return date.toISOString().split('T')[0];\r\n      })\r\n      .mapValues(readings => ({\r\n        total: _.sumBy(readings, 'consumption'),\r\n        average: _.meanBy(readings, 'consumption'),\r\n        max: _.maxBy(readings, 'consumption').consumption,\r\n        events: readings.filter(r => r.event).map(r => ({\r\n          time: r.timestamp,\r\n          event: r.event\r\n        }))\r\n      }))\r\n      .value();\r\n\r\n    return {\r\n      dailyPatterns: dailyConsumption,\r\n      averageDaily: _.meanBy(Object.values(dailyConsumption), 'total'),\r\n      peaks: this.findPeakUsagePeriods()\r\n    };\r\n  }\r\n\r\n  // Identify peak usage periods\r\n  findPeakUsagePeriods() {\r\n    const baseline = this.calculateBaseline({\r\n      start: parseTimestamp(this.data[0].timestamp),\r\n      end: parseTimestamp(this.data[this.data.length - 1].timestamp)\r\n    });\r\n\r\n    return this.data.filter(reading => {\r\n      const hour = parseTimestamp(reading.timestamp).getHours();\r\n      const baselineForHour = baseline[hour] || 0;\r\n      // Flag if consumption is 50% above baseline\r\n      return reading.consumption > baselineForHour * 1.5;\r\n    });\r\n  }\r\n\r\n  // Generate insights about energy usage\r\n  generateInsights() {\r\n    const patterns = this.findPatterns();\r\n    const peaks = patterns.peaks;\r\n    \r\n    const insights = [\r\n      {\r\n        type: 'average',\r\n        message: `Average daily consumption: ${patterns.averageDaily.toFixed(2)} kWh`\r\n      }\r\n    ];\r\n\r\n    if (peaks.length > 0) {\r\n      insights.push({\r\n        type: 'peaks',\r\n        message: `Found ${peaks.length} periods of unusually high consumption`\r\n      });\r\n    }\r\n\r\n    // Add insights about events\r\n    const events = this.data.filter(r => r.event);\r\n    if (events.length > 0) {\r\n      insights.push({\r\n        type: 'events',\r\n        message: `Found ${events.length} recorded events that may have affected consumption`\r\n      });\r\n    }\r\n\r\n    return insights;\r\n  }\r\n}\r\n\r\nexport default EnergyAnalysisEngine;"
        }
    ]
}