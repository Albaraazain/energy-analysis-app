{
    "sourceFile": "src/components/animations/Transitions.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1730298947029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1730298947029,
            "name": "Commit-0",
            "content": "\r\nimport React from 'react';\r\nimport { theme } from '../../styles/theme';\r\n\r\n// Fade transition component\r\nexport const Fade = ({ \r\n  children, \r\n  show = true, \r\n  duration = 'normal',\r\n  className = '' \r\n}) => {\r\n  const durations = {\r\n    fast: theme.animation.timing.fast,\r\n    normal: theme.animation.timing.normal,\r\n    slow: theme.animation.timing.slow\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`transition-opacity ${className}`}\r\n      style={{\r\n        opacity: show ? 1 : 0,\r\n        transitionDuration: durations[duration],\r\n        visibility: show ? 'visible' : 'hidden'\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Slide transition component\r\nexport const Slide = ({\r\n  children,\r\n  show = true,\r\n  direction = 'right',\r\n  duration = 'normal',\r\n  className = ''\r\n}) => {\r\n  const directions = {\r\n    right: { enter: 'translate-x-0', leave: 'translate-x-full' },\r\n    left: { enter: 'translate-x-0', leave: '-translate-x-full' },\r\n    up: { enter: 'translate-y-0', leave: '-translate-y-full' },\r\n    down: { enter: 'translate-y-0', leave: 'translate-y-full' }\r\n  };\r\n\r\n  const durations = {\r\n    fast: theme.animation.timing.fast,\r\n    normal: theme.animation.timing.normal,\r\n    slow: theme.animation.timing.slow\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`transform transition-transform ${className}`}\r\n      style={{\r\n        transform: show ? 'none' : `translateX(${directions[direction].leave})`,\r\n        transitionDuration: durations[duration],\r\n        visibility: show ? 'visible' : 'hidden'\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Scale transition component\r\nexport const Scale = ({\r\n  children,\r\n  show = true,\r\n  duration = 'normal',\r\n  className = ''\r\n}) => {\r\n  const durations = {\r\n    fast: theme.animation.timing.fast,\r\n    normal: theme.animation.timing.normal,\r\n    slow: theme.animation.timing.slow\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`transform transition-transform ${className}`}\r\n      style={{\r\n        transform: show ? 'scale(1)' : 'scale(0)',\r\n        transitionDuration: durations[duration],\r\n        visibility: show ? 'visible' : 'hidden'\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Animated list component\r\nexport const AnimatedList = ({ children, className = '' }) => {\r\n  return (\r\n    <div className={className}>\r\n      {React.Children.map(children, (child, index) => (\r\n        <div\r\n          key={index}\r\n          className=\"animate-fade-in\"\r\n          style={{\r\n            animationDelay: `${index * 100}ms`\r\n          }}\r\n        >\r\n          {child}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Loading animation component\r\nexport const LoadingAnimation = ({ size = 'md', color = 'primary' }) => {\r\n  const sizes = {\r\n    sm: 'w-4 h-4',\r\n    md: 'w-8 h-8',\r\n    lg: 'w-12 h-12'\r\n  };\r\n\r\n  const colors = {\r\n    primary: theme.colors.primary[500],\r\n    secondary: theme.colors.neutral[500],\r\n    white: '#ffffff'\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center\">\r\n      <div\r\n        className={`animate-pulse rounded-full ${sizes[size]}`}\r\n        style={{ backgroundColor: colors[color] }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n// Animated number component\r\nexport const AnimatedNumber = ({ value, duration = 1000 }) => {\r\n  const [displayValue, setDisplayValue] = React.useState(0);\r\n\r\n  React.useEffect(() => {\r\n    let startTime;\r\n    const startValue = displayValue;\r\n    const endValue = value;\r\n\r\n    const animate = (currentTime) => {\r\n      if (!startTime) startTime = currentTime;\r\n      const progress = (currentTime - startTime) / duration;\r\n\r\n      if (progress < 1) {\r\n        setDisplayValue(\r\n          Math.round(startValue + (endValue - startValue) * progress)\r\n        );\r\n        requestAnimationFrame(animate);\r\n      } else {\r\n        setDisplayValue(endValue);\r\n      }\r\n    };\r\n\r\n    requestAnimationFrame(animate);\r\n  }, [value, duration]);\r\n\r\n  return <span>{displayValue}</span>;\r\n};\r\n\r\n// Tooltip animation component\r\nexport const AnimatedTooltip = ({ content, children }) => {\r\n  return (\r\n    <div className=\"relative group\">\r\n      {children}\r\n      <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2\r\n                      opacity-0 group-hover:opacity-100\r\n                      translate-y-2 group-hover:translate-y-0\r\n                      transition-all duration-200 ease-out\r\n                      bg-neutral-800 text-white text-sm rounded px-2 py-1\r\n                      whitespace-nowrap\">\r\n        {content}\r\n      </div>\r\n    </div>\r\n  );\r\n};"
        }
    ]
}