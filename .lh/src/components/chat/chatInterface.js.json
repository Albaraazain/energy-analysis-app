{
    "sourceFile": "src/components/chat/chatInterface.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1730297511206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730297587791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-# File: src/components/chat/ChatInterface.js\r\n \r\n import React, { useState, useRef, useEffect } from 'react';\r\n import { Card } from '../components/ui/card';\r\n import MessageList from './MessageList';\r\n"
                },
                {
                    "date": 1730300525575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n \r\n import React, { useState, useRef, useEffect } from 'react';\r\n-import { Card } from '../components/ui/card';\r\n-import MessageList from './MessageList';\r\n+import { Card } from '../ui/card';import MessageList from './MessageList';\r\n import InputArea from './InputArea';\r\n import useQueryParser from '../../hooks/useQueryParser';\r\n import useConsumptionAnalysis from '../../hooks/useConsumptionAnalysis';\r\n import useResponseGenerator from '../../hooks/useResponseGenerator';\r\n"
                },
                {
                    "date": 1730300553722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \r\n import React, { useState, useRef, useEffect } from 'react';\r\n import { Card } from '../ui/card';import MessageList from './MessageList';\r\n import InputArea from './InputArea';\r\n-import useQueryParser from '../../hooks/useQueryParser';\r\n+import useQueryParser from '../../hooks/useQuesryParser';\r\n import useConsumptionAnalysis from '../../hooks/useConsumptionAnalysis';\r\n import useResponseGenerator from '../../hooks/useResponseGenerator';\r\n \r\n const ChatInterface = ({ energyData }) => {\r\n"
                },
                {
                    "date": 1730303895328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,54 @@\n-\r\n import React, { useState, useRef, useEffect } from 'react';\r\n-import { Card } from '../ui/card';import MessageList from './MessageList';\r\n+import { Card } from '@/components/ui/card';\r\n+import MessageList from './MessageList';\r\n import InputArea from './InputArea';\r\n-import useQueryParser from '../../hooks/useQuesryParser';\r\n-import useConsumptionAnalysis from '../../hooks/useConsumptionAnalysis';\r\n-import useResponseGenerator from '../../hooks/useResponseGenerator';\r\n \r\n+// Force debug logs regardless of environment\r\n+const debugLog = (...args) => {\r\n+  console.log('%c[ChatDebug]', 'background: #ffd700; color: black; padding: 2px 4px; border-radius: 2px;', ...args);\r\n+};\r\n+\r\n const ChatInterface = ({ energyData }) => {\r\n   const [messages, setMessages] = useState([]);\r\n   const [isProcessing, setIsProcessing] = useState(false);\r\n+  const [debugInfo, setDebugInfo] = useState({});\r\n   const chatEndRef = useRef(null);\r\n-  \r\n-  const { parseQuery, queryResult } = useQueryParser();\r\n-  const { analysis, isAnalyzing } = useConsumptionAnalysis(energyData, queryResult?.timeRange);\r\n-  const { generateResponse } = useResponseGenerator(analysis, queryResult?.type);\r\n \r\n-  // Auto-scroll to bottom when new messages arrive\r\n+  // Immediately log initial state\r\n   useEffect(() => {\r\n+    console.log('=== CHAT INTERFACE MOUNTED ===');\r\n+    console.log('Energy Data:', energyData);\r\n+    console.log('GROQ API Key present:', !!process.env.NEXT_PUBLIC_GROQ_API_KEY);\r\n+    \r\n+    setDebugInfo({\r\n+      energyDataPresent: !!energyData,\r\n+      energyDataLength: energyData?.length || 0,\r\n+      apiKeyPresent: !!process.env.NEXT_PUBLIC_GROQ_API_KEY,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n+  }, [energyData]);\r\n+\r\n+  useEffect(() => {\r\n     chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n   }, [messages]);\r\n \r\n   const handleNewMessage = async (message) => {\r\n+    console.log('=== NEW MESSAGE RECEIVED ===');\r\n+    console.log('Message:', message);\r\n+    console.log('Current State:', {\r\n+      messagesCount: messages.length,\r\n+      isProcessing,\r\n+      energyDataPresent: !!energyData\r\n+    });\r\n+\r\n+    // Update debug info\r\n+    setDebugInfo(prev => ({\r\n+      ...prev,\r\n+      lastMessage: message,\r\n+      lastMessageTime: new Date().toISOString()\r\n+    }));\r\n+\r\n     // Add user message\r\n     const userMessage = {\r\n       id: Date.now(),\r\n       type: 'user',\r\n@@ -32,56 +59,103 @@\n     setMessages(prev => [...prev, userMessage]);\r\n     setIsProcessing(true);\r\n \r\n     try {\r\n-      // Parse query and generate response\r\n-      const parsedQuery = await parseQuery(message);\r\n-      \r\n-      if (!parsedQuery) {\r\n-        throw new Error('Could not understand the query');\r\n+      // First, let's validate our setup\r\n+      if (!process.env.NEXT_PUBLIC_GROQ_API_KEY) {\r\n+        throw new Error('GROQ API key is not configured');\r\n       }\r\n \r\n-      // Wait for analysis\r\n-      if (!analysis || isAnalyzing) {\r\n-        await new Promise(resolve => setTimeout(resolve, 1000)); // Give time for analysis\r\n+      if (!energyData || !Array.isArray(energyData)) {\r\n+        throw new Error('Energy data is not properly configured');\r\n       }\r\n \r\n-      // Generate response\r\n-      const response = generateResponse();\r\n+      console.log('=== PREPARING GROQ REQUEST ===');\r\n+      const { default: Groq } = await import('groq-sdk');\r\n+      \r\n+      // Initialize Groq\r\n+      const groq = new Groq({\r\n+        apiKey: process.env.NEXT_PUBLIC_GROQ_API_KEY\r\n+      });\r\n \r\n+      console.log('Groq SDK initialized');\r\n+\r\n+      // Create a simple response first to test the connection\r\n+      const response = await groq.chat.completions.create({\r\n+        messages: [\r\n+          {\r\n+            role: \"system\",\r\n+            content: \"You are a helpful energy analysis assistant.\"\r\n+          },\r\n+          {\r\n+            role: \"user\",\r\n+            content: message\r\n+          }\r\n+        ],\r\n+        model: \"mixtral-8x7b-32768\",\r\n+        temperature: 0.7,\r\n+        max_tokens: 1000\r\n+      });\r\n+\r\n+      console.log('=== GROQ RESPONSE RECEIVED ===');\r\n+      console.log('Response:', response);\r\n+\r\n       // Add system response\r\n       const systemMessage = {\r\n         id: Date.now(),\r\n         type: 'system',\r\n-        content: response.text,\r\n-        visualizations: response.visualizations,\r\n+        content: response.choices[0].message.content,\r\n         timestamp: new Date()\r\n       };\r\n \r\n       setMessages(prev => [...prev, systemMessage]);\r\n \r\n     } catch (error) {\r\n+      console.error('=== ERROR IN CHAT INTERFACE ===');\r\n+      console.error('Error details:', {\r\n+        message: error.message,\r\n+        stack: error.stack,\r\n+        type: error.constructor.name\r\n+      });\r\n+      \r\n       // Add error message\r\n       const errorMessage = {\r\n         id: Date.now(),\r\n         type: 'system',\r\n-        content: \"I'm sorry, I couldn't process that request. Could you rephrase it?\",\r\n+        content: `Error: ${error.message}`,\r\n         isError: true,\r\n         timestamp: new Date()\r\n       };\r\n \r\n       setMessages(prev => [...prev, errorMessage]);\r\n+      \r\n+      // Update debug info with error\r\n+      setDebugInfo(prev => ({\r\n+        ...prev,\r\n+        lastError: error.message,\r\n+        errorTime: new Date().toISOString()\r\n+      }));\r\n+\r\n     } finally {\r\n       setIsProcessing(false);\r\n     }\r\n   };\r\n \r\n   return (\r\n     <Card className=\"h-[600px] flex flex-col\">\r\n+      {/* Debug Panel */}\r\n+      <div className=\"bg-yellow-100 p-2 text-xs font-mono\">\r\n+        <div>Debug Info:</div>\r\n+        <pre className=\"whitespace-pre-wrap\">\r\n+          {JSON.stringify(debugInfo, null, 2)}\r\n+        </pre>\r\n+      </div>\r\n+\r\n       <div className=\"flex-1 overflow-y-auto p-4\">\r\n         <MessageList messages={messages} />\r\n         <div ref={chatEndRef} />\r\n       </div>\r\n+\r\n       <InputArea \r\n         onSubmit={handleNewMessage}\r\n         isProcessing={isProcessing}\r\n       />\r\n"
                },
                {
                    "date": 1730303934017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useRef, useEffect } from 'react';\r\n-import { Card } from '@/components/ui/card';\r\n+import { Card } from '../ui/card';\r\n import MessageList from './MessageList';\r\n import InputArea from './InputArea';\r\n \r\n // Force debug logs regardless of environment\r\n"
                },
                {
                    "date": 1730304077884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,52 @@\n import React, { useState, useRef, useEffect } from 'react';\r\n import { Card } from '../ui/card';\r\n import MessageList from './MessageList';\r\n import InputArea from './InputArea';\r\n+import { validateEnv } from '../utils/env';\r\n \r\n-// Force debug logs regardless of environment\r\n const debugLog = (...args) => {\r\n   console.log('%c[ChatDebug]', 'background: #ffd700; color: black; padding: 2px 4px; border-radius: 2px;', ...args);\r\n };\r\n \r\n const ChatInterface = ({ energyData }) => {\r\n   const [messages, setMessages] = useState([]);\r\n   const [isProcessing, setIsProcessing] = useState(false);\r\n-  const [debugInfo, setDebugInfo] = useState({});\r\n+  const [envStatus, setEnvStatus] = useState({ isValid: false, error: null });\r\n   const chatEndRef = useRef(null);\r\n \r\n-  // Immediately log initial state\r\n+  // Validate environment on mount\r\n   useEffect(() => {\r\n-    console.log('=== CHAT INTERFACE MOUNTED ===');\r\n-    console.log('Energy Data:', energyData);\r\n-    console.log('GROQ API Key present:', !!process.env.NEXT_PUBLIC_GROQ_API_KEY);\r\n-    \r\n-    setDebugInfo({\r\n-      energyDataPresent: !!energyData,\r\n-      energyDataLength: energyData?.length || 0,\r\n-      apiKeyPresent: !!process.env.NEXT_PUBLIC_GROQ_API_KEY,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-  }, [energyData]);\r\n+    try {\r\n+      const env = validateEnv();\r\n+      console.log('Environment validated successfully');\r\n+      console.log('API Key (first 4 chars):', env.GROQ_API_KEY.substring(0, 4) + '...');\r\n+      setEnvStatus({ isValid: true, error: null });\r\n+    } catch (error) {\r\n+      console.error('Environment validation failed:', error);\r\n+      setEnvStatus({ isValid: false, error: error.message });\r\n+    }\r\n+  }, []);\r\n \r\n   useEffect(() => {\r\n     chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n   }, [messages]);\r\n \r\n   const handleNewMessage = async (message) => {\r\n-    console.log('=== NEW MESSAGE RECEIVED ===');\r\n-    console.log('Message:', message);\r\n-    console.log('Current State:', {\r\n-      messagesCount: messages.length,\r\n-      isProcessing,\r\n-      energyDataPresent: !!energyData\r\n-    });\r\n+    debugLog('New message:', message);\r\n+    \r\n+    if (!envStatus.isValid) {\r\n+      const errorMessage = {\r\n+        id: Date.now(),\r\n+        type: 'system',\r\n+        content: 'Configuration error: ' + envStatus.error,\r\n+        isError: true,\r\n+        timestamp: new Date()\r\n+      };\r\n+      setMessages(prev => [...prev, errorMessage]);\r\n+      return;\r\n+    }\r\n \r\n-    // Update debug info\r\n-    setDebugInfo(prev => ({\r\n-      ...prev,\r\n-      lastMessage: message,\r\n-      lastMessageTime: new Date().toISOString()\r\n-    }));\r\n-\r\n-    // Add user message\r\n     const userMessage = {\r\n       id: Date.now(),\r\n       type: 'user',\r\n       content: message,\r\n@@ -59,33 +56,22 @@\n     setMessages(prev => [...prev, userMessage]);\r\n     setIsProcessing(true);\r\n \r\n     try {\r\n-      // First, let's validate our setup\r\n-      if (!process.env.NEXT_PUBLIC_GROQ_API_KEY) {\r\n-        throw new Error('GROQ API key is not configured');\r\n-      }\r\n-\r\n-      if (!energyData || !Array.isArray(energyData)) {\r\n-        throw new Error('Energy data is not properly configured');\r\n-      }\r\n-\r\n-      console.log('=== PREPARING GROQ REQUEST ===');\r\n       const { default: Groq } = await import('groq-sdk');\r\n       \r\n-      // Initialize Groq\r\n+      // Initialize Groq with validated API key\r\n       const groq = new Groq({\r\n         apiKey: process.env.NEXT_PUBLIC_GROQ_API_KEY\r\n       });\r\n \r\n-      console.log('Groq SDK initialized');\r\n-\r\n-      // Create a simple response first to test the connection\r\n-      const response = await groq.chat.completions.create({\r\n+      debugLog('Sending request to Groq');\r\n+      \r\n+      const completion = await groq.chat.completions.create({\r\n         messages: [\r\n           {\r\n             role: \"system\",\r\n-            content: \"You are a helpful energy analysis assistant.\"\r\n+            content: \"You are an energy analysis assistant. Be concise but helpful.\"\r\n           },\r\n           {\r\n             role: \"user\",\r\n             content: message\r\n@@ -95,30 +81,22 @@\n         temperature: 0.7,\r\n         max_tokens: 1000\r\n       });\r\n \r\n-      console.log('=== GROQ RESPONSE RECEIVED ===');\r\n-      console.log('Response:', response);\r\n+      debugLog('Received response from Groq');\r\n \r\n-      // Add system response\r\n       const systemMessage = {\r\n         id: Date.now(),\r\n         type: 'system',\r\n-        content: response.choices[0].message.content,\r\n+        content: completion.choices[0].message.content,\r\n         timestamp: new Date()\r\n       };\r\n \r\n       setMessages(prev => [...prev, systemMessage]);\r\n \r\n     } catch (error) {\r\n-      console.error('=== ERROR IN CHAT INTERFACE ===');\r\n-      console.error('Error details:', {\r\n-        message: error.message,\r\n-        stack: error.stack,\r\n-        type: error.constructor.name\r\n-      });\r\n+      console.error('Chat error:', error);\r\n       \r\n-      // Add error message\r\n       const errorMessage = {\r\n         id: Date.now(),\r\n         type: 'system',\r\n         content: `Error: ${error.message}`,\r\n@@ -126,30 +104,26 @@\n         timestamp: new Date()\r\n       };\r\n \r\n       setMessages(prev => [...prev, errorMessage]);\r\n-      \r\n-      // Update debug info with error\r\n-      setDebugInfo(prev => ({\r\n-        ...prev,\r\n-        lastError: error.message,\r\n-        errorTime: new Date().toISOString()\r\n-      }));\r\n-\r\n     } finally {\r\n       setIsProcessing(false);\r\n     }\r\n   };\r\n \r\n   return (\r\n     <Card className=\"h-[600px] flex flex-col\">\r\n-      {/* Debug Panel */}\r\n-      <div className=\"bg-yellow-100 p-2 text-xs font-mono\">\r\n-        <div>Debug Info:</div>\r\n-        <pre className=\"whitespace-pre-wrap\">\r\n-          {JSON.stringify(debugInfo, null, 2)}\r\n-        </pre>\r\n-      </div>\r\n+      {/* Environment Status Banner */}\r\n+      {!envStatus.isValid && (\r\n+        <div className=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4\">\r\n+          <p className=\"font-bold\">Configuration Error</p>\r\n+          <p>{envStatus.error}</p>\r\n+          <p className=\"text-sm mt-2\">\r\n+            Please create a .env.local file in your project root with:\r\n+            NEXT_PUBLIC_GROQ_API_KEY=your-api-key-here\r\n+          </p>\r\n+        </div>\r\n+      )}\r\n \r\n       <div className=\"flex-1 overflow-y-auto p-4\">\r\n         <MessageList messages={messages} />\r\n         <div ref={chatEndRef} />\r\n@@ -157,10 +131,11 @@\n \r\n       <InputArea \r\n         onSubmit={handleNewMessage}\r\n         isProcessing={isProcessing}\r\n+        disabled={!envStatus.isValid}\r\n       />\r\n     </Card>\r\n   );\r\n };\r\n \r\n\\ No newline at end of file\n-export default ChatInterface;\n+export default ChatInterface;\r\n"
                },
                {
                    "date": 1730304098344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useState, useRef, useEffect } from 'react';\r\n import { Card } from '../ui/card';\r\n import MessageList from './MessageList';\r\n import InputArea from './InputArea';\r\n-import { validateEnv } from '../utils/env';\r\n+import { validateEnv } from '../../utils/env';\r\n \r\n const debugLog = (...args) => {\r\n   console.log('%c[ChatDebug]', 'background: #ffd700; color: black; padding: 2px 4px; border-radius: 2px;', ...args);\r\n };\r\n@@ -137,5 +137,5 @@\n     </Card>\r\n   );\r\n };\r\n \r\n-export default ChatInterface;\n\\ No newline at end of file\n+export default ChatInterface;\r\n"
                },
                {
                    "date": 1730304685131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n       const { default: Groq } = await import('groq-sdk');\r\n       \r\n       // Initialize Groq with validated API key\r\n       const groq = new Groq({\r\n-        apiKey: process.env.NEXT_PUBLIC_GROQ_API_KEY\r\n+        apiKey: process.env.REACT_APP_GROQ_API_KEY\r\n       });\r\n \r\n       debugLog('Sending request to Groq');\r\n       \r\n@@ -118,9 +118,9 @@\n           <p className=\"font-bold\">Configuration Error</p>\r\n           <p>{envStatus.error}</p>\r\n           <p className=\"text-sm mt-2\">\r\n             Please create a .env.local file in your project root with:\r\n-            NEXT_PUBLIC_GROQ_API_KEY=your-api-key-here\r\n+            REACT_APP_GROQ_API_KEY=your-api-key-here\r\n           </p>\r\n         </div>\r\n       )}\r\n \r\n"
                },
                {
                    "date": 1730305865136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,52 +1,26 @@\n import React, { useState, useRef, useEffect } from 'react';\r\n-import { Card } from '../ui/card';\r\n+import { Card } from '@/components/ui/card';\r\n import MessageList from './MessageList';\r\n import InputArea from './InputArea';\r\n-import { validateEnv } from '../../utils/env';\r\n+import Groq from 'groq-sdk';\r\n \r\n-const debugLog = (...args) => {\r\n-  console.log('%c[ChatDebug]', 'background: #ffd700; color: black; padding: 2px 4px; border-radius: 2px;', ...args);\r\n-};\r\n+// Initialize Groq client outside component\r\n+const groqClient = new Groq({ \r\n+  apiKey: process.env.REACT_APP_GROQ_API_KEY,\r\n+  dangerouslyAllowBrowser: true\r\n+});\r\n \r\n const ChatInterface = ({ energyData }) => {\r\n   const [messages, setMessages] = useState([]);\r\n   const [isProcessing, setIsProcessing] = useState(false);\r\n-  const [envStatus, setEnvStatus] = useState({ isValid: false, error: null });\r\n   const chatEndRef = useRef(null);\r\n \r\n-  // Validate environment on mount\r\n   useEffect(() => {\r\n-    try {\r\n-      const env = validateEnv();\r\n-      console.log('Environment validated successfully');\r\n-      console.log('API Key (first 4 chars):', env.GROQ_API_KEY.substring(0, 4) + '...');\r\n-      setEnvStatus({ isValid: true, error: null });\r\n-    } catch (error) {\r\n-      console.error('Environment validation failed:', error);\r\n-      setEnvStatus({ isValid: false, error: error.message });\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n     chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n   }, [messages]);\r\n \r\n   const handleNewMessage = async (message) => {\r\n-    debugLog('New message:', message);\r\n-    \r\n-    if (!envStatus.isValid) {\r\n-      const errorMessage = {\r\n-        id: Date.now(),\r\n-        type: 'system',\r\n-        content: 'Configuration error: ' + envStatus.error,\r\n-        isError: true,\r\n-        timestamp: new Date()\r\n-      };\r\n-      setMessages(prev => [...prev, errorMessage]);\r\n-      return;\r\n-    }\r\n-\r\n     const userMessage = {\r\n       id: Date.now(),\r\n       type: 'user',\r\n       content: message,\r\n@@ -56,18 +30,9 @@\n     setMessages(prev => [...prev, userMessage]);\r\n     setIsProcessing(true);\r\n \r\n     try {\r\n-      const { default: Groq } = await import('groq-sdk');\r\n-      \r\n-      // Initialize Groq with validated API key\r\n-      const groq = new Groq({\r\n-        apiKey: process.env.REACT_APP_GROQ_API_KEY\r\n-      });\r\n-\r\n-      debugLog('Sending request to Groq');\r\n-      \r\n-      const completion = await groq.chat.completions.create({\r\n+      const completion = await groqClient.chat.completions.create({\r\n         messages: [\r\n           {\r\n             role: \"system\",\r\n             content: \"You are an energy analysis assistant. Be concise but helpful.\"\r\n@@ -81,19 +46,16 @@\n         temperature: 0.7,\r\n         max_tokens: 1000\r\n       });\r\n \r\n-      debugLog('Received response from Groq');\r\n-\r\n       const systemMessage = {\r\n         id: Date.now(),\r\n         type: 'system',\r\n         content: completion.choices[0].message.content,\r\n         timestamp: new Date()\r\n       };\r\n \r\n       setMessages(prev => [...prev, systemMessage]);\r\n-\r\n     } catch (error) {\r\n       console.error('Chat error:', error);\r\n       \r\n       const errorMessage = {\r\n@@ -111,31 +73,18 @@\n   };\r\n \r\n   return (\r\n     <Card className=\"h-[600px] flex flex-col\">\r\n-      {/* Environment Status Banner */}\r\n-      {!envStatus.isValid && (\r\n-        <div className=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4\">\r\n-          <p className=\"font-bold\">Configuration Error</p>\r\n-          <p>{envStatus.error}</p>\r\n-          <p className=\"text-sm mt-2\">\r\n-            Please create a .env.local file in your project root with:\r\n-            REACT_APP_GROQ_API_KEY=your-api-key-here\r\n-          </p>\r\n-        </div>\r\n-      )}\r\n-\r\n       <div className=\"flex-1 overflow-y-auto p-4\">\r\n         <MessageList messages={messages} />\r\n         <div ref={chatEndRef} />\r\n       </div>\r\n \r\n       <InputArea \r\n         onSubmit={handleNewMessage}\r\n         isProcessing={isProcessing}\r\n-        disabled={!envStatus.isValid}\r\n       />\r\n     </Card>\r\n   );\r\n };\r\n \r\n-export default ChatInterface;\r\n+export default ChatInterface;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730305886184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useRef, useEffect } from 'react';\r\n-import { Card } from '@/components/ui/card';\r\n+import { Card } from '../ui/card';\r\n import MessageList from './MessageList';\r\n import InputArea from './InputArea';\r\n import Groq from 'groq-sdk';\r\n \r\n"
                }
            ],
            "date": 1730297511206,
            "name": "Commit-0",
            "content": "# File: src/components/chat/ChatInterface.js\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { Card } from '../components/ui/card';\r\nimport MessageList from './MessageList';\r\nimport InputArea from './InputArea';\r\nimport useQueryParser from '../../hooks/useQueryParser';\r\nimport useConsumptionAnalysis from '../../hooks/useConsumptionAnalysis';\r\nimport useResponseGenerator from '../../hooks/useResponseGenerator';\r\n\r\nconst ChatInterface = ({ energyData }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const chatEndRef = useRef(null);\r\n  \r\n  const { parseQuery, queryResult } = useQueryParser();\r\n  const { analysis, isAnalyzing } = useConsumptionAnalysis(energyData, queryResult?.timeRange);\r\n  const { generateResponse } = useResponseGenerator(analysis, queryResult?.type);\r\n\r\n  // Auto-scroll to bottom when new messages arrive\r\n  useEffect(() => {\r\n    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const handleNewMessage = async (message) => {\r\n    // Add user message\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      type: 'user',\r\n      content: message,\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setIsProcessing(true);\r\n\r\n    try {\r\n      // Parse query and generate response\r\n      const parsedQuery = await parseQuery(message);\r\n      \r\n      if (!parsedQuery) {\r\n        throw new Error('Could not understand the query');\r\n      }\r\n\r\n      // Wait for analysis\r\n      if (!analysis || isAnalyzing) {\r\n        await new Promise(resolve => setTimeout(resolve, 1000)); // Give time for analysis\r\n      }\r\n\r\n      // Generate response\r\n      const response = generateResponse();\r\n\r\n      // Add system response\r\n      const systemMessage = {\r\n        id: Date.now(),\r\n        type: 'system',\r\n        content: response.text,\r\n        visualizations: response.visualizations,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      setMessages(prev => [...prev, systemMessage]);\r\n\r\n    } catch (error) {\r\n      // Add error message\r\n      const errorMessage = {\r\n        id: Date.now(),\r\n        type: 'system',\r\n        content: \"I'm sorry, I couldn't process that request. Could you rephrase it?\",\r\n        isError: true,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"h-[600px] flex flex-col\">\r\n      <div className=\"flex-1 overflow-y-auto p-4\">\r\n        <MessageList messages={messages} />\r\n        <div ref={chatEndRef} />\r\n      </div>\r\n      <InputArea \r\n        onSubmit={handleNewMessage}\r\n        isProcessing={isProcessing}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;"
        }
    ]
}