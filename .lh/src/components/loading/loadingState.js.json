{
    "sourceFile": "src/components/loading/loadingState.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1730298250261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1730298250261,
            "name": "Commit-0",
            "content": "# File: src/components/loading/LoadingStates.js\r\n\r\nimport React, { memo } from 'react';\r\nimport { Card } from '../components/ui/card';\r\n\r\n// Skeleton loading for chat messages\r\nexport const MessageSkeleton = memo(() => (\r\n  <div className=\"animate-pulse space-y-3\">\r\n    <div className=\"flex justify-start\">\r\n      <div className=\"bg-gray-200 rounded-lg p-3 w-2/3\">\r\n        <div className=\"h-4 bg-gray-300 rounded w-3/4\"></div>\r\n        <div className=\"h-4 bg-gray-300 rounded w-1/2 mt-2\"></div>\r\n      </div>\r\n    </div>\r\n    <div className=\"flex justify-end\">\r\n      <div className=\"bg-blue-100 rounded-lg p-3 w-2/3\">\r\n        <div className=\"h-4 bg-blue-200 rounded w-2/3\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n));\r\n\r\n// Skeleton loading for visualizations\r\nexport const ChartSkeleton = memo(() => (\r\n  <div className=\"animate-pulse\">\r\n    <div className=\"h-64 bg-gray-200 rounded-lg\"></div>\r\n    <div className=\"mt-4 space-y-2\">\r\n      <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\r\n      <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\r\n    </div>\r\n  </div>\r\n));\r\n\r\n// Loading overlay for async operations\r\nexport const LoadingOverlay = memo(({ message = 'Loading...' }) => (\r\n  <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center \r\n                  justify-center z-50\">\r\n    <Card className=\"p-6 bg-white\">\r\n      <div className=\"flex items-center space-x-4\">\r\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\r\n        <p className=\"text-gray-700\">{message}</p>\r\n      </div>\r\n    </Card>\r\n  </div>\r\n));\r\n\r\n// Progressive loading indicator\r\nexport const ProgressiveLoader = memo(({ progress }) => (\r\n  <div className=\"w-full h-1 bg-gray-200 rounded-full overflow-hidden\">\r\n    <div\r\n      className=\"h-full bg-blue-500 transition-all duration-300\"\r\n      style={{ width: `${progress}%` }}\r\n    ></div>\r\n  </div>\r\n));\r\n\r\n# File: src/utils/performance.js\r\n\r\n// Debounce utility for performance optimization\r\nexport const debounce = (func, wait) => {\r\n  let timeout;\r\n  return function executedFunction(...args) {\r\n    const later = () => {\r\n      clearTimeout(timeout);\r\n      func(...args);\r\n    };\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n  };\r\n};\r\n\r\n// Memoization utility for expensive calculations\r\nexport const memoize = (fn) => {\r\n  const cache = new Map();\r\n  return (...args) => {\r\n    const key = JSON.stringify(args);\r\n    if (cache.has(key)) return cache.get(key);\r\n    const result = fn.apply(this, args);\r\n    cache.set(key, result);\r\n    return result;\r\n  };\r\n};\r\n\r\n// Chunk data processing for better performance\r\nexport const processInChunks = async (items, processItem, chunkSize = 1000) => {\r\n  const results = [];\r\n  for (let i = 0; i < items.length; i += chunkSize) {\r\n    const chunk = items.slice(i, i + chunkSize);\r\n    const processedChunk = await Promise.all(chunk.map(processItem));\r\n    results.push(...processedChunk);\r\n    // Allow UI to update between chunks\r\n    await new Promise(resolve => setTimeout(resolve, 0));\r\n  }\r\n  return results;\r\n};\r\n\r\n// Virtual scrolling helper\r\nexport const getVisibleItems = (items, scrollTop, viewportHeight, itemHeight) => {\r\n  const startIndex = Math.floor(scrollTop / itemHeight);\r\n  const endIndex = Math.min(\r\n    startIndex + Math.ceil(viewportHeight / itemHeight + 1),\r\n    items.length\r\n  );\r\n  return {\r\n    items: items.slice(startIndex, endIndex),\r\n    startIndex,\r\n    endIndex\r\n  };\r\n};"
        }
    ]
}