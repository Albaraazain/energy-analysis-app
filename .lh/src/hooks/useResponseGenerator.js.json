{
    "sourceFile": "src/hooks/useResponseGenerator.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1730297125702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730299916652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,12 @@\n-# File: src/hooks/useResponseGenerator.js\r\n+// useResponseGenerator Hook:\r\n \r\n+// Response generation management\r\n+// Visualization recommendations\r\n+// Priority-based visualization ordering\r\n+// Anomaly integration\r\n+// Query-type specific responses\r\n+\r\n import { useState, useCallback } from 'react';\r\n import responseGenerator from '../utils/responseGenerator';\r\n \r\n const useResponseGenerator = (analysis, queryType) => {\r\n"
                }
            ],
            "date": 1730297125702,
            "name": "Commit-0",
            "content": "# File: src/hooks/useResponseGenerator.js\r\n\r\nimport { useState, useCallback } from 'react';\r\nimport responseGenerator from '../utils/responseGenerator';\r\n\r\nconst useResponseGenerator = (analysis, queryType) => {\r\n  const [response, setResponse] = useState(null);\r\n  const [visualizations, setVisualizations] = useState([]);\r\n\r\n  // Generate response with recommended visualizations\r\n  const generateResponse = useCallback(() => {\r\n    if (!analysis) return null;\r\n\r\n    // Generate natural language response\r\n    const textResponse = responseGenerator.generateResponse(analysis, queryType);\r\n\r\n    // Determine appropriate visualizations based on analysis and query type\r\n    const recommendedVisualizations = determineVisualizations(analysis, queryType);\r\n\r\n    setResponse(textResponse);\r\n    setVisualizations(recommendedVisualizations);\r\n\r\n    return {\r\n      text: textResponse,\r\n      visualizations: recommendedVisualizations\r\n    };\r\n  }, [analysis, queryType]);\r\n\r\n  // Helper function to determine appropriate visualizations\r\n  const determineVisualizations = (analysis, queryType) => {\r\n    const visualizations = [];\r\n\r\n    switch (queryType) {\r\n      case 'usage_inquiry':\r\n        // Show basic line chart for usage over time\r\n        visualizations.push({\r\n          type: 'lineChart',\r\n          data: analysis.hourlyData,\r\n          title: 'Energy Usage Over Time',\r\n          priority: 1\r\n        });\r\n        break;\r\n\r\n      case 'comparison':\r\n        // Show comparison bar chart\r\n        visualizations.push({\r\n          type: 'barChart',\r\n          data: analysis.comparisonData,\r\n          title: 'Usage Comparison',\r\n          priority: 1\r\n        });\r\n        \r\n        // Add trend line if applicable\r\n        if (analysis.trends?.trend) {\r\n          visualizations.push({\r\n            type: 'trendLine',\r\n            data: analysis.trends.movingAverage,\r\n            title: 'Usage Trend',\r\n            priority: 2\r\n          });\r\n        }\r\n        break;\r\n\r\n      case 'pattern':\r\n        // Show daily pattern heatmap\r\n        visualizations.push({\r\n          type: 'heatmap',\r\n          data: analysis.patterns?.hourlyPattern,\r\n          title: 'Daily Usage Pattern',\r\n          priority: 1\r\n        });\r\n\r\n        // Add weekly pattern if available\r\n        if (analysis.patterns?.weeklyPattern) {\r\n          visualizations.push({\r\n            type: 'barChart',\r\n            data: analysis.patterns.weeklyPattern,\r\n            title: 'Weekly Usage Pattern',\r\n            priority: 2\r\n          });\r\n        }\r\n        break;\r\n\r\n      default:\r\n        // Default to simple line chart\r\n        visualizations.push({\r\n          type: 'lineChart',\r\n          data: analysis.hourlyData,\r\n          title: 'Energy Consumption',\r\n          priority: 1\r\n        });\r\n    }\r\n\r\n    // Add anomaly markers if anomalies detected\r\n    if (analysis.anomalies?.length > 0) {\r\n      visualizations.forEach(viz => {\r\n        if (viz.type === 'lineChart') {\r\n          viz.anomalies = analysis.anomalies;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Sort by priority\r\n    return visualizations.sort((a, b) => a.priority - b.priority);\r\n  };\r\n\r\n  return {\r\n    response,\r\n    visualizations,\r\n    generateResponse\r\n  };\r\n};\r\n\r\nexport default useResponseGenerator;"
        }
    ]
}