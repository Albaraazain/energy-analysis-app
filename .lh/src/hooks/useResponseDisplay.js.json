{
    "sourceFile": "src/hooks/useResponseDisplay.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1730297851588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730297876834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,11 @@\n-# File: src/hooks/useResponseDisplay.js\r\n+// ResponseDisplay Component:\r\n \r\n+// Main display container\r\n+// Section organization\r\n+// Responsive layout\r\n+// Component composition\r\n+\r\n import { useState, useEffect, useCallback } from 'react';\r\n \r\n const useResponseDisplay = (analysisResult, queryType) => {\r\n   const [displayData, setDisplayData] = useState(null);\r\n"
                }
            ],
            "date": 1730297851588,
            "name": "Commit-0",
            "content": "# File: src/hooks/useResponseDisplay.js\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\n\r\nconst useResponseDisplay = (analysisResult, queryType) => {\r\n  const [displayData, setDisplayData] = useState(null);\r\n  const [activeSection, setActiveSection] = useState('summary');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Format analysis result for display\r\n  const formatDisplayData = useCallback((result) => {\r\n    if (!result) return null;\r\n\r\n    return {\r\n      summary: formatSummary(result),\r\n      metrics: formatMetrics(result),\r\n      insights: formatInsights(result),\r\n      comparisons: formatComparisons(result)\r\n    };\r\n  }, []);\r\n\r\n  // Format summary section\r\n  const formatSummary = (result) => {\r\n    const { totalConsumption, averageConsumption, trend } = result.summary;\r\n    \r\n    return {\r\n      text: `Your total energy consumption was ${totalConsumption.toFixed(2)} kWh, \r\n             with an average of ${averageConsumption.toFixed(2)} kWh. \r\n             Overall trend shows ${trend.direction} consumption.`,\r\n      highlight: trend.direction !== 'stable'\r\n    };\r\n  };\r\n\r\n  // Format metrics section\r\n  const formatMetrics = (result) => {\r\n    const { current, previous } = result;\r\n    \r\n    return [\r\n      {\r\n        title: 'Total Consumption',\r\n        value: current.total,\r\n        unit: 'kWh',\r\n        change: ((current.total - previous.total) / previous.total) * 100,\r\n        timeframe: 'previous period'\r\n      },\r\n      {\r\n        title: 'Average Daily',\r\n        value: current.average,\r\n        unit: 'kWh/day',\r\n        change: ((current.average - previous.average) / previous.average) * 100,\r\n        timeframe: 'previous period'\r\n      },\r\n      {\r\n        title: 'Peak Usage',\r\n        value: current.peak,\r\n        unit: 'kWh',\r\n        timeframe: 'highest recorded'\r\n      }\r\n    ];\r\n  };\r\n\r\n  // Format insights section\r\n  const formatInsights = (result) => {\r\n    const insights = [];\r\n    \r\n    // Add trend insight\r\n    if (result.trends?.trend) {\r\n      insights.push({\r\n        type: result.trends.trend.direction === 'increasing' ? 'negative' : 'positive',\r\n        title: 'Consumption Trend',\r\n        description: `Your energy usage is ${result.trends.trend.direction}`,\r\n        value: result.trends.trend.magnitude,\r\n        impact: result.trends.trend.direction === 'increasing' ? 1 : -1\r\n      });\r\n    }\r\n\r\n    // Add pattern insights\r\n    if (result.patterns?.significant) {\r\n      insights.push({\r\n        type: 'neutral',\r\n        title: 'Usage Pattern',\r\n        description: result.patterns.description,\r\n        value: null\r\n      });\r\n    }\r\n\r\n    // Add comparison insight\r\n    if (result.comparison) {\r\n      const percentChange = ((result.current.total - result.previous.total) / result.previous.total) * 100;\r\n      insights.push({\r\n        type: percentChange > 0 ? 'negative' : 'positive',\r\n        title: 'Period Comparison',\r\n        description: `Consumption ${percentChange > 0 ? 'increased' : 'decreased'} compared to previous period`,\r\n        value: Math.abs(percentChange),\r\n        impact: percentChange > 0 ? 1 : -1\r\n      });\r\n    }\r\n\r\n    return insights;\r\n  };\r\n\r\n  // Format comparisons section\r\n  const formatComparisons = (result) => {\r\n    if (!result.comparison) return null;\r\n\r\n    return result.comparison.hourlyData.map(hour => ({\r\n      timestamp: hour.timestamp,\r\n      value: hour.consumption,\r\n      baseline: hour.baseline\r\n    }));\r\n  };\r\n\r\n  // Update display when analysis result changes\r\n  useEffect(() => {\r\n    if (!analysisResult) return;\r\n\r\n    setIsLoading(true);\r\n    const formatted = formatDisplayData(analysisResult);\r\n    setDisplayData(formatted);\r\n    setIsLoading(false);\r\n  }, [analysisResult, formatDisplayData]);\r\n\r\n  // Handle section navigation\r\n  const navigateToSection = (section) => {\r\n    setActiveSection(section);\r\n  };\r\n\r\n  return {\r\n    displayData,\r\n    activeSection,\r\n    isLoading,\r\n    navigateToSection\r\n  };\r\n};\r\n\r\nexport default useResponseDisplay;"
        }
    ]
}