{
    "sourceFile": "src/hooks/useVisualization.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1730298052201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730298058251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-# File: src/hooks/useVisualization.js\r\n \r\n import { useState, useEffect, useCallback } from 'react';\r\n import _ from 'lodash';\r\n \r\n"
                },
                {
                    "date": 1730298073986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,13 @@\n+// Visualization Hook:\r\n \r\n+// Data processing\r\n+// Filtering capabilities\r\n+// Pattern detection\r\n+// Anomaly detection\r\n+// State management\r\n+\r\n+\r\n import { useState, useEffect, useCallback } from 'react';\r\n import _ from 'lodash';\r\n \r\n const useVisualization = (data, timeRange) => {\r\n"
                }
            ],
            "date": 1730298052201,
            "name": "Commit-0",
            "content": "# File: src/hooks/useVisualization.js\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport _ from 'lodash';\r\n\r\nconst useVisualization = (data, timeRange) => {\r\n  const [processedData, setProcessedData] = useState(null);\r\n  const [activeView, setActiveView] = useState('consumption');\r\n  const [filters, setFilters] = useState({\r\n    timeRange: '24h',\r\n    groupBy: 'hour',\r\n    showBaseline: true,\r\n    showAnomalies: true\r\n  });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Process data based on current filters\r\n  const processData = useCallback(() => {\r\n    if (!data || data.length === 0) return null;\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      // Group data based on selected interval\r\n      const groupedData = groupDataByInterval(data, filters.groupBy);\r\n      \r\n      // Apply time range filter\r\n      const filteredData = filterByTimeRange(groupedData, filters.timeRange);\r\n      \r\n      // Calculate additional metrics\r\n      const enrichedData = enrichData(filteredData);\r\n\r\n      setProcessedData(enrichedData);\r\n    } catch (error) {\r\n      console.error('Error processing visualization data:', error);\r\n      setProcessedData(null);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [data, filters]);\r\n\r\n  // Update data when filters or source data change\r\n  useEffect(() => {\r\n    processData();\r\n  }, [processData, data, filters]);\r\n\r\n  // Group data by specified interval\r\n  const groupDataByInterval = (data, interval) => {\r\n    return _.chain(data)\r\n      .groupBy(reading => {\r\n        const date = new Date(reading.timestamp);\r\n        switch (interval) {\r\n          case 'hour':\r\n            return date.setMinutes(0, 0, 0);\r\n          case 'day':\r\n            return date.setHours(0, 0, 0, 0);\r\n          case 'week':\r\n            const startOfWeek = new Date(date);\r\n            startOfWeek.setDate(date.getDate() - date.getDay());\r\n            return startOfWeek.setHours(0, 0, 0, 0);\r\n          default:\r\n            return date.getTime();\r\n        }\r\n      })\r\n      .map((readings, timestamp) => ({\r\n        timestamp: Number(timestamp),\r\n        consumption: _.meanBy(readings, 'consumption'),\r\n        count: readings.length,\r\n        min: _.minBy(readings, 'consumption').consumption,\r\n        max: _.maxBy(readings, 'consumption').consumption\r\n      }))\r\n      .value();\r\n  };\r\n\r\n  // Filter data by time range\r\n  const filterByTimeRange = (data, range) => {\r\n    const now = new Date();\r\n    const startTime = new Date(now);\r\n\r\n    switch (range) {\r\n      case '24h':\r\n        startTime.setHours(now.getHours() - 24);\r\n        break;\r\n      case '7d':\r\n        startTime.setDate(now.getDate() - 7);\r\n        break;\r\n      case '30d':\r\n        startTime.setDate(now.getDate() - 30);\r\n        break;\r\n      default:\r\n        return data;\r\n    }\r\n\r\n    return data.filter(item => item.timestamp >= startTime.getTime());\r\n  };\r\n\r\n  // Enrich data with additional metrics\r\n  const enrichData = (data) => {\r\n    const baseline = calculateBaseline(data);\r\n    const anomalies = detectAnomalies(data, baseline);\r\n\r\n    return data.map(item => ({\r\n      ...item,\r\n      baseline: filters.showBaseline ? baseline[new Date(item.timestamp).getHours()] : undefined,\r\n      isAnomaly: filters.showAnomalies ? anomalies.includes(item.timestamp) : false\r\n    }));\r\n  };\r\n\r\n  // Calculate baseline consumption\r\n  const calculateBaseline = (data) => {\r\n    return _.chain(data)\r\n      .groupBy(item => new Date(item.timestamp).getHours())\r\n      .mapValues(group => _.meanBy(group, 'consumption'))\r\n      .value();\r\n  };\r\n\r\n  // Detect anomalies using standard deviation\r\n  const detectAnomalies = (data, baseline) => {\r\n    const stdDev = calculateStandardDeviation(data.map(item => item.consumption));\r\n    const threshold = stdDev * 2; // 2 standard deviations\r\n\r\n    return data\r\n      .filter(item => {\r\n        const hour = new Date(item.timestamp).getHours();\r\n        return Math.abs(item.consumption - baseline[hour]) > threshold;\r\n      })\r\n      .map(item => item.timestamp);\r\n  };\r\n\r\n  // Calculate standard deviation\r\n  const calculateStandardDeviation = (values) => {\r\n    const mean = _.mean(values);\r\n    const squaredDiffs = values.map(value => Math.pow(value - mean, 2));\r\n    return Math.sqrt(_.mean(squaredDiffs));\r\n  };\r\n\r\n  // Update filters\r\n  const updateFilters = (newFilters) => {\r\n    setFilters(prev => ({\r\n      ...prev,\r\n      ...newFilters\r\n    }));\r\n  };\r\n\r\n  // Change active view\r\n  const changeView = (view) => {\r\n    setActiveView(view);\r\n  };\r\n\r\n  return {\r\n    processedData,\r\n    activeView,\r\n    filters,\r\n    isLoading,\r\n    updateFilters,\r\n    changeView,\r\n    refreshData: processData\r\n  };\r\n};\r\n\r\nexport default useVisualization;"
        }
    ]
}