{
    "sourceFile": "src/hooks/useConsumptionAnalysis.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1730300591054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1730300591054,
            "name": "Commit-0",
            "content": "\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport ConsumptionAnalyzer from '../utils/consumptionAnalyzer';\r\n\r\nconst useConsumptionAnalysis = (data, timeRange) => {\r\n  const [analyzer, setAnalyzer] = useState(null);\r\n  const [analysis, setAnalysis] = useState(null);\r\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Initialize analyzer when data changes\r\n  useEffect(() => {\r\n    if (data && data.length > 0) {\r\n      setAnalyzer(new ConsumptionAnalyzer(data));\r\n    }\r\n  }, [data]);\r\n\r\n  // Perform analysis when timeRange changes\r\n  useEffect(() => {\r\n    if (!analyzer || !timeRange) return;\r\n\r\n    const performAnalysis = async () => {\r\n      setIsAnalyzing(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const results = analyzer.analyzeTimeRange(\r\n          timeRange.start,\r\n          timeRange.end\r\n        );\r\n\r\n        if (results.error) {\r\n          throw new Error(results.error);\r\n        }\r\n\r\n        setAnalysis(results);\r\n      } catch (err) {\r\n        setError(err.message);\r\n        setAnalysis(null);\r\n      } finally {\r\n        setIsAnalyzing(false);\r\n      }\r\n    };\r\n\r\n    performAnalysis();\r\n  }, [analyzer, timeRange]);\r\n\r\n  // Generate insights based on analysis\r\n  const generateInsights = useCallback(() => {\r\n    if (!analysis) return [];\r\n\r\n    const insights = [];\r\n\r\n    // Trend insights\r\n    if (analysis.trends.trend.confidence > 0.6) {\r\n      insights.push({\r\n        type: 'trend',\r\n        title: 'Consumption Trend',\r\n        description: `Energy consumption is ${analysis.trends.trend.direction} \r\n          ${analysis.trends.trend.magnitude > 0.1 ? 'significantly' : 'slightly'}`,\r\n        confidence: analysis.trends.trend.confidence\r\n      });\r\n    }\r\n\r\n    // Variability insights\r\n    const { coefficientOfVariation } = analysis.trends.variability;\r\n    if (coefficientOfVariation > 0.2) {\r\n      insights.push({\r\n        type: 'variability',\r\n        title: 'Usage Variability',\r\n        description: `Your energy usage shows ${\r\n          coefficientOfVariation > 0.4 ? 'high' : 'moderate'\r\n        } variability`,\r\n        confidence: Math.min(coefficientOfVariation * 2, 1)\r\n      });\r\n    }\r\n\r\n    // Peak usage insights\r\n    const { max, median } = analysis.statistics;\r\n    if (max > median * 2) {\r\n      insights.push({\r\n        type: 'peak',\r\n        title: 'Peak Usage',\r\n        description: 'Significant peak usage detected, considerably higher than typical consumption',\r\n        confidence: Math.min((max / median - 1) / 2, 1)\r\n      });\r\n    }\r\n\r\n    return insights.sort((a, b) => b.confidence - a.confidence);\r\n  }, [analysis]);\r\n\r\n  // Format analysis for display\r\n  const formatAnalysis = useCallback(() => {\r\n    if (!analysis) return null;\r\n\r\n    return {\r\n      summary: {\r\n        total: analysis.totalConsumption.toFixed(2),\r\n        average: analysis.averageConsumption.toFixed(2),\r\n        peak: analysis.statistics.max.toFixed(2),\r\n        lowest: analysis.statistics.min.toFixed(2)\r\n      },\r\n      trends: {\r\n        direction: analysis.trends.trend.direction,\r\n        confidence: (analysis.trends.trend.confidence * 100).toFixed(1) + '%',\r\n        variability: (analysis.trends.variability.coefficientOfVariation * 100).toFixed(1) + '%'\r\n      },\r\n      reliability: (analysis.summary.reliability * 100).toFixed(1) + '%'\r\n    };\r\n  }, [analysis]);\r\n\r\n  return {\r\n    analysis,\r\n    isAnalyzing,\r\n    error,\r\n    generateInsights,\r\n    formatAnalysis\r\n  };\r\n};\r\n\r\nexport default useConsumptionAnalysis;"
        }
    ]
}