{
    "sourceFile": "src/hooks/useBaselineAnalyzis.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1730296997452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730299916665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,116 @@\n-useBaselineAnalysis Hook:\r\n+// useBaselineAnalysis Hook:\r\n \r\n-Manages baseline calculations\r\n-Tracks analysis state\r\n-Provides comparison functionality\r\n-Generates insights\r\n\\ No newline at end of file\n-Handles errors\n+// Manages baseline calculations\r\n+// Tracks analysis state\r\n+// Provides comparison functionality\r\n+// Generates insights\r\n+// Handles errors\r\n+\r\n+\r\n+import { useState, useEffect, useCallback } from 'react';\r\n+import BaselineAnalyzer from '../utils/baselineAnalyzer';\r\n+\r\n+const useBaselineAnalysis = (data, timeRange) => {\r\n+  const [analyzer, setAnalyzer] = useState(null);\r\n+  const [baseline, setBaseline] = useState(null);\r\n+  const [patterns, setPatterns] = useState(null);\r\n+  const [isAnalyzing, setIsAnalyzing] = useState(false);\r\n+  const [error, setError] = useState(null);\r\n+\r\n+  // Initialize analyzer when data changes\r\n+  useEffect(() => {\r\n+    if (data && data.length > 0) {\r\n+      setAnalyzer(new BaselineAnalyzer(data));\r\n+    }\r\n+  }, [data]);\r\n+\r\n+  // Perform analysis when timeRange changes\r\n+  useEffect(() => {\r\n+    if (!analyzer || !timeRange) return;\r\n+\r\n+    const analyzeData = async () => {\r\n+      setIsAnalyzing(true);\r\n+      setError(null);\r\n+\r\n+      try {\r\n+        // Calculate baseline\r\n+        const newBaseline = analyzer.calculateBaseline(timeRange);\r\n+        setBaseline(newBaseline);\r\n+\r\n+        // Detect patterns\r\n+        const newPatterns = analyzer.detectPatterns(timeRange);\r\n+        setPatterns(newPatterns);\r\n+      } catch (err) {\r\n+        setError('Failed to analyze consumption patterns');\r\n+        console.error('Analysis error:', err);\r\n+      } finally {\r\n+        setIsAnalyzing(false);\r\n+      }\r\n+    };\r\n+\r\n+    analyzeData();\r\n+  }, [analyzer, timeRange]);\r\n+\r\n+  // Compare current usage to baseline\r\n+  const compareToBaseline = useCallback((readings) => {\r\n+    if (!analyzer || !baseline || !readings) return null;\r\n+    return analyzer.compareToBaseline(readings, baseline);\r\n+  }, [analyzer, baseline]);\r\n+\r\n+  // Generate insights from patterns\r\n+  const generateInsights = useCallback(() => {\r\n+    if (!patterns || !baseline) return [];\r\n+\r\n+    const insights = [];\r\n+\r\n+    // Peak usage insights\r\n+    if (patterns.peakUsagePeriods.length > 0) {\r\n+      const topPeak = patterns.peakUsagePeriods[0];\r\n+      insights.push({\r\n+        type: 'peak',\r\n+        title: 'Peak Usage Time',\r\n+        description: `Highest usage typically occurs at ${topPeak.hour}:00`,\r\n+        significance: topPeak.significance\r\n+      });\r\n+    }\r\n+\r\n+    // Daily pattern insights\r\n+    const { weekday, weekend } = patterns.dailyPatterns;\r\n+    const weekdayWeekendDiff = ((weekend.average - weekday.average) / weekday.average) * 100;\r\n+\r\n+    if (Math.abs(weekdayWeekendDiff) > 20) {\r\n+      insights.push({\r\n+        type: 'daily',\r\n+        title: 'Weekend vs Weekday Usage',\r\n+        description: `Weekend usage is ${Math.abs(weekdayWeekendDiff).toFixed(1)}% ${weekdayWeekendDiff > 0 ? 'higher' : 'lower'} than weekdays`,\r\n+        significance: Math.abs(weekdayWeekendDiff) / 100\r\n+      });\r\n+    }\r\n+\r\n+    // Time-of-day insights\r\n+    const { morning, evening } = patterns.hourlyPatterns;\r\n+    const morningEveningDiff = ((evening.averageUsage - morning.averageUsage) / morning.averageUsage) * 100;\r\n+\r\n+    if (Math.abs(morningEveningDiff) > 30) {\r\n+      insights.push({\r\n+        type: 'hourly',\r\n+        title: 'Usage Distribution',\r\n+        description: `Energy usage is significantly ${morningEveningDiff > 0 ? 'higher' : 'lower'} in the evening compared to morning`,\r\n+        significance: Math.abs(morningEveningDiff) / 100\r\n+      });\r\n+    }\r\n+\r\n+    return insights.sort((a, b) => b.significance - a.significance);\r\n+  }, [patterns, baseline]);\r\n+\r\n+  return {\r\n+    baseline,\r\n+    patterns,\r\n+    isAnalyzing,\r\n+    error,\r\n+    compareToBaseline,\r\n+    generateInsights\r\n+  };\r\n+};\r\n+\r\n+export default useBaselineAnalysis;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1730296997452,
            "name": "Commit-0",
            "content": "useBaselineAnalysis Hook:\r\n\r\nManages baseline calculations\r\nTracks analysis state\r\nProvides comparison functionality\r\nGenerates insights\r\nHandles errors"
        }
    ]
}