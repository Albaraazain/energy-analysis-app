{
    "sourceFile": "src/test/components/EnergyChart.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1730299096190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730299301180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,101 +24,4 @@\n     expect(onTimeRangeChange).toHaveBeenCalledWith('24h');\r\n   });\r\n });\r\n \r\n-# File: src/tests/components/ChatInterface.test.js\r\n-\r\n-import React from 'react';\r\n-import { render, screen, fireEvent, waitFor } from '../setup/test-utils';\r\n-import ChatInterface from '../../components/chat/ChatInterface';\r\n-import { mockHandlers } from '../setup/test-utils';\r\n-\r\n-describe('ChatInterface', () => {\r\n-  it('renders input field', () => {\r\n-    render(<ChatInterface />);\r\n-    expect(screen.getByPlaceholderText(/ask about your energy/i)).toBeInTheDocument();\r\n-  });\r\n-\r\n-  it('handles message submission', async () => {\r\n-    const { onQuerySubmit } = mockHandlers;\r\n-    render(<ChatInterface onQuerySubmit={onQuerySubmit} />);\r\n-    \r\n-    const input = screen.getByPlaceholderText(/ask about your energy/i);\r\n-    fireEvent.change(input, { target: { value: 'How much energy did I use yesterday?' } });\r\n-    fireEvent.click(screen.getByText(/send/i));\r\n-\r\n-    await waitFor(() => {\r\n-      expect(onQuerySubmit).toHaveBeenCalledWith('How much energy did I use yesterday?');\r\n-    });\r\n-  });\r\n-\r\n-  it('shows error message on invalid input', async () => {\r\n-    render(<ChatInterface />);\r\n-    \r\n-    const input = screen.getByPlaceholderText(/ask about your energy/i);\r\n-    fireEvent.change(input, { target: { value: '' } });\r\n-    fireEvent.click(screen.getByText(/send/i));\r\n-\r\n-    expect(screen.getByText(/please enter a query/i)).toBeInTheDocument();\r\n-  });\r\n-});\r\n-\r\n-# File: src/tests/components/ResponseDisplay.test.js\r\n-\r\n-import React from 'react';\r\n-import { render, screen } from '../setup/test-utils';\r\n-import ResponseDisplay from '../../components/response/ResponseDisplay';\r\n-import { mockAnalysisResults } from '../mocks/dataMocks';\r\n-\r\n-describe('ResponseDisplay', () => {\r\n-  it('renders analysis results', () => {\r\n-    render(<ResponseDisplay analysisResult={mockAnalysisResults} />);\r\n-    expect(screen.getByText(/energy analysis/i)).toBeInTheDocument();\r\n-  });\r\n-\r\n-  it('shows insights when available', () => {\r\n-    render(<ResponseDisplay analysisResult={mockAnalysisResults} />);\r\n-    expect(screen.getByText(/consumption trend/i)).toBeInTheDocument();\r\n-  });\r\n-\r\n-  it('handles empty state', () => {\r\n-    render(<ResponseDisplay analysisResult={null} />);\r\n-    expect(screen.getByText(/no analysis available/i)).toBeInTheDocument();\r\n-  });\r\n-});\r\n-\r\n-# File: src/tests/hooks/useEnergyAnalysis.test.js\r\n-\r\n-import { renderHook, act } from '@testing-library/react-hooks';\r\n-import { useEnergyAnalysis } from '../../hooks/useEnergyAnalysis';\r\n-import { mockEnergyData, mockTimeRanges } from '../mocks/dataMocks';\r\n-\r\n-describe('useEnergyAnalysis', () => {\r\n-  it('initializes with default state', () => {\r\n-    const { result } = renderHook(() => useEnergyAnalysis());\r\n-    expect(result.current.isLoading).toBeFalsy();\r\n-    expect(result.current.data).toBeNull();\r\n-  });\r\n-\r\n-  it('loads and processes data', async () => {\r\n-    const { result, waitForNextUpdate } = renderHook(() => useEnergyAnalysis());\r\n-    \r\n-    act(() => {\r\n-      result.current.loadData(mockEnergyData);\r\n-    });\r\n-\r\n-    await waitForNextUpdate();\r\n-    \r\n-    expect(result.current.data).toEqual(mockEnergyData);\r\n-    expect(result.current.processedData).toBeTruthy();\r\n-  });\r\n-\r\n-  it('handles time range changes', () => {\r\n-    const { result } = renderHook(() => useEnergyAnalysis());\r\n-    \r\n-    act(() => {\r\n-      result.current.setTimeRange(mockTimeRanges.day);\r\n-    });\r\n-\r\n-    expect(result.current.timeRange).toEqual(mockTimeRanges.day);\r\n-  });\r\n-});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730299312259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-# File: src/tests/components/EnergyChart.test.js\r\n \r\n import React from 'react';\r\n import { render, screen, fireEvent } from '../setup/test-utils';\r\n import EnergyChart from '../../components/visualization/EnergyChart';\r\n"
                }
            ],
            "date": 1730299096190,
            "name": "Commit-0",
            "content": "# File: src/tests/components/EnergyChart.test.js\r\n\r\nimport React from 'react';\r\nimport { render, screen, fireEvent } from '../setup/test-utils';\r\nimport EnergyChart from '../../components/visualization/EnergyChart';\r\nimport { mockEnergyData } from '../setup/test-utils';\r\n\r\ndescribe('EnergyChart', () => {\r\n  it('renders with data', () => {\r\n    render(<EnergyChart data={mockEnergyData} />);\r\n    expect(screen.getByRole('img', { name: /energy usage chart/i })).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows loading state', () => {\r\n    render(<EnergyChart data={[]} isLoading={true} />);\r\n    expect(screen.getByText(/loading/i)).toBeInTheDocument();\r\n  });\r\n\r\n  it('handles time range changes', () => {\r\n    const onTimeRangeChange = jest.fn();\r\n    render(<EnergyChart data={mockEnergyData} onTimeRangeChange={onTimeRangeChange} />);\r\n    \r\n    fireEvent.click(screen.getByText('24h'));\r\n    expect(onTimeRangeChange).toHaveBeenCalledWith('24h');\r\n  });\r\n});\r\n\r\n# File: src/tests/components/ChatInterface.test.js\r\n\r\nimport React from 'react';\r\nimport { render, screen, fireEvent, waitFor } from '../setup/test-utils';\r\nimport ChatInterface from '../../components/chat/ChatInterface';\r\nimport { mockHandlers } from '../setup/test-utils';\r\n\r\ndescribe('ChatInterface', () => {\r\n  it('renders input field', () => {\r\n    render(<ChatInterface />);\r\n    expect(screen.getByPlaceholderText(/ask about your energy/i)).toBeInTheDocument();\r\n  });\r\n\r\n  it('handles message submission', async () => {\r\n    const { onQuerySubmit } = mockHandlers;\r\n    render(<ChatInterface onQuerySubmit={onQuerySubmit} />);\r\n    \r\n    const input = screen.getByPlaceholderText(/ask about your energy/i);\r\n    fireEvent.change(input, { target: { value: 'How much energy did I use yesterday?' } });\r\n    fireEvent.click(screen.getByText(/send/i));\r\n\r\n    await waitFor(() => {\r\n      expect(onQuerySubmit).toHaveBeenCalledWith('How much energy did I use yesterday?');\r\n    });\r\n  });\r\n\r\n  it('shows error message on invalid input', async () => {\r\n    render(<ChatInterface />);\r\n    \r\n    const input = screen.getByPlaceholderText(/ask about your energy/i);\r\n    fireEvent.change(input, { target: { value: '' } });\r\n    fireEvent.click(screen.getByText(/send/i));\r\n\r\n    expect(screen.getByText(/please enter a query/i)).toBeInTheDocument();\r\n  });\r\n});\r\n\r\n# File: src/tests/components/ResponseDisplay.test.js\r\n\r\nimport React from 'react';\r\nimport { render, screen } from '../setup/test-utils';\r\nimport ResponseDisplay from '../../components/response/ResponseDisplay';\r\nimport { mockAnalysisResults } from '../mocks/dataMocks';\r\n\r\ndescribe('ResponseDisplay', () => {\r\n  it('renders analysis results', () => {\r\n    render(<ResponseDisplay analysisResult={mockAnalysisResults} />);\r\n    expect(screen.getByText(/energy analysis/i)).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows insights when available', () => {\r\n    render(<ResponseDisplay analysisResult={mockAnalysisResults} />);\r\n    expect(screen.getByText(/consumption trend/i)).toBeInTheDocument();\r\n  });\r\n\r\n  it('handles empty state', () => {\r\n    render(<ResponseDisplay analysisResult={null} />);\r\n    expect(screen.getByText(/no analysis available/i)).toBeInTheDocument();\r\n  });\r\n});\r\n\r\n# File: src/tests/hooks/useEnergyAnalysis.test.js\r\n\r\nimport { renderHook, act } from '@testing-library/react-hooks';\r\nimport { useEnergyAnalysis } from '../../hooks/useEnergyAnalysis';\r\nimport { mockEnergyData, mockTimeRanges } from '../mocks/dataMocks';\r\n\r\ndescribe('useEnergyAnalysis', () => {\r\n  it('initializes with default state', () => {\r\n    const { result } = renderHook(() => useEnergyAnalysis());\r\n    expect(result.current.isLoading).toBeFalsy();\r\n    expect(result.current.data).toBeNull();\r\n  });\r\n\r\n  it('loads and processes data', async () => {\r\n    const { result, waitForNextUpdate } = renderHook(() => useEnergyAnalysis());\r\n    \r\n    act(() => {\r\n      result.current.loadData(mockEnergyData);\r\n    });\r\n\r\n    await waitForNextUpdate();\r\n    \r\n    expect(result.current.data).toEqual(mockEnergyData);\r\n    expect(result.current.processedData).toBeTruthy();\r\n  });\r\n\r\n  it('handles time range changes', () => {\r\n    const { result } = renderHook(() => useEnergyAnalysis());\r\n    \r\n    act(() => {\r\n      result.current.setTimeRange(mockTimeRanges.day);\r\n    });\r\n\r\n    expect(result.current.timeRange).toEqual(mockTimeRanges.day);\r\n  });\r\n});"
        }
    ]
}