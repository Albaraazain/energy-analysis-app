{
    "sourceFile": "src/test/performance/Performance.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1730299120262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730299219658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-# File: src/tests/performance/performance.test.js\r\n \r\n import { render, screen } from '@testing-library/react';\r\n import { measureRenderTime, measureMemoryUsage } from './performanceUtils';\r\n import App from '../../App';\r\n@@ -41,66 +40,4 @@\n     expect(memoryIncrease).toBeLessThan(50 * 1024 * 1024); // 50MB budget\r\n   });\r\n });\r\n \r\n-# File: src/tests/performance/performanceUtils.js\r\n-\r\n-// Measure render time\r\n-export const measureRenderTime = async (renderFn) => {\r\n-  const start = performance.now();\r\n-  await renderFn();\r\n-  return performance.now() - start;\r\n-};\r\n-\r\n-// Measure memory usage\r\n-export const measureMemoryUsage = async () => {\r\n-  if (performance.memory) {\r\n-    return performance.memory.usedJSHeapSize;\r\n-  }\r\n-  return 0;\r\n-};\r\n-\r\n-// Test data processing performance\r\n-export const testDataProcessing = (processFn, data, iterations = 100) => {\r\n-  const times = [];\r\n-  \r\n-  for (let i = 0; i < iterations; i++) {\r\n-    const start = performance.now();\r\n-    processFn(data);\r\n-    times.push(performance.now() - start);\r\n-  }\r\n-\r\n-  return {\r\n-    average: times.reduce((a, b) => a + b) / times.length,\r\n-    min: Math.min(...times),\r\n-    max: Math.max(...times),\r\n-    p95: times.sort((a, b) => a - b)[Math.floor(times.length * 0.95)]\r\n-  };\r\n-};\r\n-\r\n-# File: src/tests/performance/loadTesting.js\r\n-\r\n-import http from 'k6/http';\r\n-import { check, sleep } from 'k6';\r\n-\r\n-export const options = {\r\n-  stages: [\r\n-    { duration: '30s', target: 20 }, // Ramp up to 20 users\r\n-    { duration: '1m', target: 20 },  // Stay at 20 users\r\n-    { duration: '30s', target: 0 },  // Ramp down to 0 users\r\n-  ],\r\n-  thresholds: {\r\n-    http_req_duration: ['p(95)<500'], // 95% of requests should be below 500ms\r\n-    http_req_failed: ['rate<0.01'],   // Less than 1% of requests should fail\r\n-  },\r\n-};\r\n-\r\n-export default function () {\r\n-  const response = http.get('http://localhost:3000/api/energy-data');\r\n-  \r\n-  check(response, {\r\n-    'is status 200': (r) => r.status === 200,\r\n-    'response time OK': (r) => r.timings.duration < 500,\r\n-  });\r\n-\r\n-  sleep(1);\r\n-}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1730299120262,
            "name": "Commit-0",
            "content": "# File: src/tests/performance/performance.test.js\r\n\r\nimport { render, screen } from '@testing-library/react';\r\nimport { measureRenderTime, measureMemoryUsage } from './performanceUtils';\r\nimport App from '../../App';\r\nimport { mockEnergyData } from '../setup/test-utils';\r\n\r\ndescribe('Performance Tests', () => {\r\n  // Test initial render time\r\n  it('renders main app within performance budget', async () => {\r\n    const renderTime = await measureRenderTime(() => {\r\n      render(<App />);\r\n    });\r\n\r\n    expect(renderTime).toBeLessThan(200); // 200ms budget\r\n  });\r\n\r\n  // Test chart rendering performance\r\n  it('renders chart with large dataset efficiently', async () => {\r\n    const largeDataset = Array.from({ length: 1000 }, (_, i) => ({\r\n      timestamp: new Date(2024, 0, 1, i % 24).toISOString(),\r\n      consumption: Math.random() * 5\r\n    }));\r\n\r\n    const renderTime = await measureRenderTime(() => {\r\n      render(<EnergyChart data={largeDataset} />);\r\n    });\r\n\r\n    expect(renderTime).toBeLessThan(500); // 500ms budget for large dataset\r\n  });\r\n\r\n  // Test memory usage\r\n  it('maintains reasonable memory usage', async () => {\r\n    const memoryBefore = await measureMemoryUsage();\r\n    \r\n    render(<App />);\r\n    \r\n    const memoryAfter = await measureMemoryUsage();\r\n    const memoryIncrease = memoryAfter - memoryBefore;\r\n\r\n    expect(memoryIncrease).toBeLessThan(50 * 1024 * 1024); // 50MB budget\r\n  });\r\n});\r\n\r\n# File: src/tests/performance/performanceUtils.js\r\n\r\n// Measure render time\r\nexport const measureRenderTime = async (renderFn) => {\r\n  const start = performance.now();\r\n  await renderFn();\r\n  return performance.now() - start;\r\n};\r\n\r\n// Measure memory usage\r\nexport const measureMemoryUsage = async () => {\r\n  if (performance.memory) {\r\n    return performance.memory.usedJSHeapSize;\r\n  }\r\n  return 0;\r\n};\r\n\r\n// Test data processing performance\r\nexport const testDataProcessing = (processFn, data, iterations = 100) => {\r\n  const times = [];\r\n  \r\n  for (let i = 0; i < iterations; i++) {\r\n    const start = performance.now();\r\n    processFn(data);\r\n    times.push(performance.now() - start);\r\n  }\r\n\r\n  return {\r\n    average: times.reduce((a, b) => a + b) / times.length,\r\n    min: Math.min(...times),\r\n    max: Math.max(...times),\r\n    p95: times.sort((a, b) => a - b)[Math.floor(times.length * 0.95)]\r\n  };\r\n};\r\n\r\n# File: src/tests/performance/loadTesting.js\r\n\r\nimport http from 'k6/http';\r\nimport { check, sleep } from 'k6';\r\n\r\nexport const options = {\r\n  stages: [\r\n    { duration: '30s', target: 20 }, // Ramp up to 20 users\r\n    { duration: '1m', target: 20 },  // Stay at 20 users\r\n    { duration: '30s', target: 0 },  // Ramp down to 0 users\r\n  ],\r\n  thresholds: {\r\n    http_req_duration: ['p(95)<500'], // 95% of requests should be below 500ms\r\n    http_req_failed: ['rate<0.01'],   // Less than 1% of requests should fail\r\n  },\r\n};\r\n\r\nexport default function () {\r\n  const response = http.get('http://localhost:3000/api/energy-data');\r\n  \r\n  check(response, {\r\n    'is status 200': (r) => r.status === 200,\r\n    'response time OK': (r) => r.timings.duration < 500,\r\n  });\r\n\r\n  sleep(1);\r\n}"
        }
    ]
}