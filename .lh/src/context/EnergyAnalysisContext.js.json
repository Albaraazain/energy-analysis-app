{
    "sourceFile": "src/context/EnergyAnalysisContext.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1730298170555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1730298170555,
            "name": "Commit-0",
            "content": "# File: src/context/EnergyAnalysisContext.js\r\n\r\nimport React, { createContext, useContext, useReducer, useMemo } from 'react';\r\n\r\n// Initial state\r\nconst initialState = {\r\n  energyData: [],\r\n  isLoading: false,\r\n  error: null,\r\n  currentQuery: null,\r\n  analysisResults: null,\r\n  timeRange: {\r\n    start: new Date(Date.now() - 24 * 60 * 60 * 1000), // Last 24 hours\r\n    end: new Date()\r\n  },\r\n  selectedView: 'chat', // 'chat' or 'analysis'\r\n};\r\n\r\n// Action types\r\nconst ACTION_TYPES = {\r\n  SET_ENERGY_DATA: 'SET_ENERGY_DATA',\r\n  SET_LOADING: 'SET_LOADING',\r\n  SET_ERROR: 'SET_ERROR',\r\n  SET_QUERY: 'SET_QUERY',\r\n  SET_ANALYSIS_RESULTS: 'SET_ANALYSIS_RESULTS',\r\n  SET_TIME_RANGE: 'SET_TIME_RANGE',\r\n  SET_VIEW: 'SET_VIEW',\r\n  RESET_ERROR: 'RESET_ERROR'\r\n};\r\n\r\n// Reducer function\r\nconst energyAnalysisReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ACTION_TYPES.SET_ENERGY_DATA:\r\n      return {\r\n        ...state,\r\n        energyData: action.payload,\r\n        error: null\r\n      };\r\n\r\n    case ACTION_TYPES.SET_LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload\r\n      };\r\n\r\n    case ACTION_TYPES.SET_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isLoading: false\r\n      };\r\n\r\n    case ACTION_TYPES.SET_QUERY:\r\n      return {\r\n        ...state,\r\n        currentQuery: action.payload,\r\n        error: null\r\n      };\r\n\r\n    case ACTION_TYPES.SET_ANALYSIS_RESULTS:\r\n      return {\r\n        ...state,\r\n        analysisResults: action.payload,\r\n        error: null\r\n      };\r\n\r\n    case ACTION_TYPES.SET_TIME_RANGE:\r\n      return {\r\n        ...state,\r\n        timeRange: action.payload\r\n      };\r\n\r\n    case ACTION_TYPES.SET_VIEW:\r\n      return {\r\n        ...state,\r\n        selectedView: action.payload\r\n      };\r\n\r\n    case ACTION_TYPES.RESET_ERROR:\r\n      return {\r\n        ...state,\r\n        error: null\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Create context\r\nconst EnergyAnalysisContext = createContext(null);\r\n\r\n// Context provider\r\nexport const EnergyAnalysisProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(energyAnalysisReducer, initialState);\r\n\r\n  // Memoize context value\r\n  const contextValue = useMemo(() => ({\r\n    state,\r\n    dispatch,\r\n    \r\n    // Action creators\r\n    actions: {\r\n      setEnergyData: (data) => dispatch({\r\n        type: ACTION_TYPES.SET_ENERGY_DATA,\r\n        payload: data\r\n      }),\r\n\r\n      setLoading: (isLoading) => dispatch({\r\n        type: ACTION_TYPES.SET_LOADING,\r\n        payload: isLoading\r\n      }),\r\n\r\n      setError: (error) => dispatch({\r\n        type: ACTION_TYPES.SET_ERROR,\r\n        payload: error\r\n      }),\r\n\r\n      setQuery: (query) => dispatch({\r\n        type: ACTION_TYPES.SET_QUERY,\r\n        payload: query\r\n      }),\r\n\r\n      setAnalysisResults: (results) => dispatch({\r\n        type: ACTION_TYPES.SET_ANALYSIS_RESULTS,\r\n        payload: results\r\n      }),\r\n\r\n      setTimeRange: (timeRange) => dispatch({\r\n        type: ACTION_TYPES.SET_TIME_RANGE,\r\n        payload: timeRange\r\n      }),\r\n\r\n      setView: (view) => dispatch({\r\n        type: ACTION_TYPES.SET_VIEW,\r\n        payload: view\r\n      }),\r\n\r\n      resetError: () => dispatch({\r\n        type: ACTION_TYPES.RESET_ERROR\r\n      })\r\n    }\r\n  }), [state, dispatch]);\r\n\r\n  return (\r\n    <EnergyAnalysisContext.Provider value={contextValue}>\r\n      {children}\r\n    </EnergyAnalysisContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook for using the context\r\nexport const useEnergyAnalysis = () => {\r\n  const context = useContext(EnergyAnalysisContext);\r\n  if (!context) {\r\n    throw new Error('useEnergyAnalysis must be used within an EnergyAnalysisProvider');\r\n  }\r\n  return context;\r\n};"
        }
    ]
}