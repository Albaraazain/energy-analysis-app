{
    "sourceFile": "src/tests/components/ChatInterface.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1730303356165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730303375781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import InputArea from './InputArea';\r\n \r\n // Initialize Groq client\r\n const groq = new Groq({\r\n-  apiKey: process.env.NEXT_PUBLIC_GROQ_API_KEY, // Make sure to set this in your environment\r\n+  apiKey: process.env.NEXT_PUBLIC_GROQ_API_KEY, \r\n });\r\n \r\n const ChatInterface = ({ energyData }) => {\r\n   const [messages, setMessages] = useState([]);\r\n"
                },
                {
                    "date": 1730303530942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,49 +3,72 @@\n import { Card } from '@/components/ui/card';\r\n import MessageList from './MessageList';\r\n import InputArea from './InputArea';\r\n \r\n-// Initialize Groq client\r\n-const groq = new Groq({\r\n-  apiKey: process.env.NEXT_PUBLIC_GROQ_API_KEY, \r\n-});\r\n+// Debug flag - set to true to see debug logs\r\n+const DEBUG = true;\r\n \r\n+const debugLog = (...args) => {\r\n+  if (DEBUG) {\r\n+    console.log('[ChatInterface Debug]:', ...args);\r\n+  }\r\n+};\r\n+\r\n const ChatInterface = ({ energyData }) => {\r\n   const [messages, setMessages] = useState([]);\r\n   const [isProcessing, setIsProcessing] = useState(false);\r\n   const chatEndRef = useRef(null);\r\n \r\n-  // Auto-scroll to bottom when new messages arrive\r\n+  // Debug: Log when component mounts and when energyData changes\r\n   useEffect(() => {\r\n+    debugLog('Component mounted with energyData:', energyData);\r\n+  }, [energyData]);\r\n+\r\n+  useEffect(() => {\r\n     chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n   }, [messages]);\r\n \r\n-  // Generate system prompt based on available data\r\n   const generateSystemPrompt = () => {\r\n-    const dataRange = {\r\n-      start: new Date(energyData[0].timestamp),\r\n-      end: new Date(energyData[energyData.length - 1].timestamp)\r\n-    };\r\n-    \r\n-    return `You are an energy analysis assistant. You help users understand their energy consumption patterns and provide insights.\r\n+    try {\r\n+      debugLog('Generating system prompt with energyData:', \r\n+        energyData ? energyData.length : 'no data');\r\n \r\n+      if (!energyData || !Array.isArray(energyData) || energyData.length === 0) {\r\n+        throw new Error('Invalid or empty energyData');\r\n+      }\r\n+\r\n+      const dataRange = {\r\n+        start: new Date(energyData[0].timestamp),\r\n+        end: new Date(energyData[energyData.length - 1].timestamp)\r\n+      };\r\n+\r\n+      const prompt = `You are an energy analysis assistant helping users understand their energy consumption patterns.\r\n+\r\n Available data range: ${dataRange.start.toLocaleDateString()} to ${dataRange.end.toLocaleDateString()}\r\n Number of readings: ${energyData.length}\r\n \r\n-Current energy data summary:\r\n-${JSON.stringify(energyData.slice(0, 5), null, 2)}\r\n-...and ${energyData.length - 5} more readings\r\n+Sample of current data:\r\n+${JSON.stringify(energyData.slice(0, 3), null, 2)}\r\n \r\n-When analyzing the data, consider:\r\n+When analyzing, consider:\r\n 1. Daily and weekly patterns\r\n 2. Unusual spikes or drops\r\n 3. Comparison with typical usage\r\n 4. Potential energy-saving opportunities\r\n \r\n-Always provide specific numerical insights when relevant.`;\r\n+Respond conversationally but include specific numbers when relevant.`;\r\n+\r\n+      debugLog('Generated system prompt:', prompt);\r\n+      return prompt;\r\n+    } catch (error) {\r\n+      debugLog('Error generating system prompt:', error);\r\n+      throw error;\r\n+    }\r\n   };\r\n \r\n   const handleNewMessage = async (message) => {\r\n+    debugLog('Handling new message:', message);\r\n+    \r\n     // Add user message\r\n     const userMessage = {\r\n       id: Date.now(),\r\n       type: 'user',\r\n@@ -56,34 +79,50 @@\n     setMessages(prev => [...prev, userMessage]);\r\n     setIsProcessing(true);\r\n \r\n     try {\r\n-      // Format conversation history for the model\r\n+      debugLog('Checking Groq API key:', process.env.NEXT_PUBLIC_GROQ_API_KEY ? 'Present' : 'Missing');\r\n+      \r\n+      // Initialize Groq with API key\r\n+      const groq = new Groq({\r\n+        apiKey: process.env.NEXT_PUBLIC_GROQ_API_KEY,\r\n+      });\r\n+\r\n+      // Format conversation history\r\n       const formattedHistory = messages.map(msg => ({\r\n         role: msg.type === 'user' ? 'user' : 'assistant',\r\n         content: msg.content\r\n       }));\r\n+      \r\n+      debugLog('Formatted history:', formattedHistory);\r\n \r\n+      // Prepare messages array for API call\r\n+      const apiMessages = [\r\n+        {\r\n+          role: \"system\",\r\n+          content: generateSystemPrompt()\r\n+        },\r\n+        ...formattedHistory,\r\n+        {\r\n+          role: \"user\",\r\n+          content: message\r\n+        }\r\n+      ];\r\n+\r\n+      debugLog('Sending request to Groq API with messages:', apiMessages);\r\n+\r\n       // Create completion request\r\n       const completion = await groq.chat.completions.create({\r\n-        messages: [\r\n-          {\r\n-            role: \"system\",\r\n-            content: generateSystemPrompt()\r\n-          },\r\n-          ...formattedHistory,\r\n-          {\r\n-            role: \"user\",\r\n-            content: message\r\n-          }\r\n-        ],\r\n-        model: \"mixtral-8x7b-32768\", // You can also try \"llama-3.1-70b-versatile\"\r\n+        messages: apiMessages,\r\n+        model: \"mixtral-8x7b-32768\",\r\n         temperature: 0.7,\r\n         max_tokens: 1000,\r\n         top_p: 1,\r\n         stream: false\r\n       });\r\n \r\n+      debugLog('Received response from Groq:', completion);\r\n+\r\n       // Add system response\r\n       const systemMessage = {\r\n         id: Date.now(),\r\n         type: 'system',\r\n@@ -93,28 +132,51 @@\n \r\n       setMessages(prev => [...prev, systemMessage]);\r\n \r\n     } catch (error) {\r\n-      console.error('Error processing message with Groq:', error);\r\n+      debugLog('Error in handleNewMessage:', error);\r\n+      console.error('Detailed error:', error);\r\n       \r\n-      // Add error message\r\n-      const errorMessage = {\r\n+      // Create more informative error message\r\n+      let errorMessage = {\r\n         id: Date.now(),\r\n         type: 'system',\r\n-        content: \"I'm sorry, I encountered an error while processing your request. Please try again.\",\r\n+        content: error.message || \"An error occurred while processing your request.\",\r\n         isError: true,\r\n         timestamp: new Date()\r\n       };\r\n \r\n+      // Add more specific error messages based on error type\r\n+      if (!process.env.NEXT_PUBLIC_GROQ_API_KEY) {\r\n+        errorMessage.content = \"API key is missing. Please check your environment configuration.\";\r\n+      } else if (error.message.includes('API key')) {\r\n+        errorMessage.content = \"Invalid API key. Please check your configuration.\";\r\n+      } else if (error.message.includes('network')) {\r\n+        errorMessage.content = \"Network error occurred. Please check your internet connection.\";\r\n+      }\r\n+\r\n       setMessages(prev => [...prev, errorMessage]);\r\n     } finally {\r\n       setIsProcessing(false);\r\n     }\r\n   };\r\n \r\n+  // Debug: Log whenever messages state changes\r\n+  useEffect(() => {\r\n+    debugLog('Messages updated:', messages);\r\n+  }, [messages]);\r\n+\r\n   return (\r\n     <Card className=\"h-[600px] flex flex-col\">\r\n       <div className=\"flex-1 overflow-y-auto p-4\">\r\n+        {/* Debug info at the top if DEBUG is true */}\r\n+        {DEBUG && (\r\n+          <div className=\"mb-4 p-2 bg-gray-100 rounded text-xs\">\r\n+            <div>Energy Data Points: {energyData?.length || 0}</div>\r\n+            <div>API Key Present: {process.env.NEXT_PUBLIC_GROQ_API_KEY ? 'Yes' : 'No'}</div>\r\n+            <div>Message Count: {messages.length}</div>\r\n+          </div>\r\n+        )}\r\n         <MessageList messages={messages} />\r\n         <div ref={chatEndRef} />\r\n       </div>\r\n       <InputArea \r\n"
                },
                {
                    "date": 1730303667162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,74 +1,54 @@\n import React, { useState, useRef, useEffect } from 'react';\r\n-import Groq from \"groq-sdk\";\r\n import { Card } from '@/components/ui/card';\r\n import MessageList from './MessageList';\r\n import InputArea from './InputArea';\r\n \r\n-// Debug flag - set to true to see debug logs\r\n-const DEBUG = true;\r\n-\r\n+// Force debug logs regardless of environment\r\n const debugLog = (...args) => {\r\n-  if (DEBUG) {\r\n-    console.log('[ChatInterface Debug]:', ...args);\r\n-  }\r\n+  console.log('%c[ChatDebug]', 'background: #ffd700; color: black; padding: 2px 4px; border-radius: 2px;', ...args);\r\n };\r\n \r\n const ChatInterface = ({ energyData }) => {\r\n   const [messages, setMessages] = useState([]);\r\n   const [isProcessing, setIsProcessing] = useState(false);\r\n+  const [debugInfo, setDebugInfo] = useState({});\r\n   const chatEndRef = useRef(null);\r\n \r\n-  // Debug: Log when component mounts and when energyData changes\r\n+  // Immediately log initial state\r\n   useEffect(() => {\r\n-    debugLog('Component mounted with energyData:', energyData);\r\n+    console.log('=== CHAT INTERFACE MOUNTED ===');\r\n+    console.log('Energy Data:', energyData);\r\n+    console.log('GROQ API Key present:', !!process.env.NEXT_PUBLIC_GROQ_API_KEY);\r\n+    \r\n+    setDebugInfo({\r\n+      energyDataPresent: !!energyData,\r\n+      energyDataLength: energyData?.length || 0,\r\n+      apiKeyPresent: !!process.env.NEXT_PUBLIC_GROQ_API_KEY,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n   }, [energyData]);\r\n \r\n   useEffect(() => {\r\n     chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n   }, [messages]);\r\n \r\n-  const generateSystemPrompt = () => {\r\n-    try {\r\n-      debugLog('Generating system prompt with energyData:', \r\n-        energyData ? energyData.length : 'no data');\r\n+  const handleNewMessage = async (message) => {\r\n+    console.log('=== NEW MESSAGE RECEIVED ===');\r\n+    console.log('Message:', message);\r\n+    console.log('Current State:', {\r\n+      messagesCount: messages.length,\r\n+      isProcessing,\r\n+      energyDataPresent: !!energyData\r\n+    });\r\n \r\n-      if (!energyData || !Array.isArray(energyData) || energyData.length === 0) {\r\n-        throw new Error('Invalid or empty energyData');\r\n-      }\r\n+    // Update debug info\r\n+    setDebugInfo(prev => ({\r\n+      ...prev,\r\n+      lastMessage: message,\r\n+      lastMessageTime: new Date().toISOString()\r\n+    }));\r\n \r\n-      const dataRange = {\r\n-        start: new Date(energyData[0].timestamp),\r\n-        end: new Date(energyData[energyData.length - 1].timestamp)\r\n-      };\r\n-\r\n-      const prompt = `You are an energy analysis assistant helping users understand their energy consumption patterns.\r\n-\r\n-Available data range: ${dataRange.start.toLocaleDateString()} to ${dataRange.end.toLocaleDateString()}\r\n-Number of readings: ${energyData.length}\r\n-\r\n-Sample of current data:\r\n-${JSON.stringify(energyData.slice(0, 3), null, 2)}\r\n-\r\n-When analyzing, consider:\r\n-1. Daily and weekly patterns\r\n-2. Unusual spikes or drops\r\n-3. Comparison with typical usage\r\n-4. Potential energy-saving opportunities\r\n-\r\n-Respond conversationally but include specific numbers when relevant.`;\r\n-\r\n-      debugLog('Generated system prompt:', prompt);\r\n-      return prompt;\r\n-    } catch (error) {\r\n-      debugLog('Error generating system prompt:', error);\r\n-      throw error;\r\n-    }\r\n-  };\r\n-\r\n-  const handleNewMessage = async (message) => {\r\n-    debugLog('Handling new message:', message);\r\n-    \r\n     // Add user message\r\n     const userMessage = {\r\n       id: Date.now(),\r\n       type: 'user',\r\n@@ -79,107 +59,103 @@\n     setMessages(prev => [...prev, userMessage]);\r\n     setIsProcessing(true);\r\n \r\n     try {\r\n-      debugLog('Checking Groq API key:', process.env.NEXT_PUBLIC_GROQ_API_KEY ? 'Present' : 'Missing');\r\n+      // First, let's validate our setup\r\n+      if (!process.env.NEXT_PUBLIC_GROQ_API_KEY) {\r\n+        throw new Error('GROQ API key is not configured');\r\n+      }\r\n+\r\n+      if (!energyData || !Array.isArray(energyData)) {\r\n+        throw new Error('Energy data is not properly configured');\r\n+      }\r\n+\r\n+      console.log('=== PREPARING GROQ REQUEST ===');\r\n+      const { default: Groq } = await import('groq-sdk');\r\n       \r\n-      // Initialize Groq with API key\r\n+      // Initialize Groq\r\n       const groq = new Groq({\r\n-        apiKey: process.env.NEXT_PUBLIC_GROQ_API_KEY,\r\n+        apiKey: process.env.NEXT_PUBLIC_GROQ_API_KEY\r\n       });\r\n \r\n-      // Format conversation history\r\n-      const formattedHistory = messages.map(msg => ({\r\n-        role: msg.type === 'user' ? 'user' : 'assistant',\r\n-        content: msg.content\r\n-      }));\r\n-      \r\n-      debugLog('Formatted history:', formattedHistory);\r\n+      console.log('Groq SDK initialized');\r\n \r\n-      // Prepare messages array for API call\r\n-      const apiMessages = [\r\n-        {\r\n-          role: \"system\",\r\n-          content: generateSystemPrompt()\r\n-        },\r\n-        ...formattedHistory,\r\n-        {\r\n-          role: \"user\",\r\n-          content: message\r\n-        }\r\n-      ];\r\n-\r\n-      debugLog('Sending request to Groq API with messages:', apiMessages);\r\n-\r\n-      // Create completion request\r\n-      const completion = await groq.chat.completions.create({\r\n-        messages: apiMessages,\r\n+      // Create a simple response first to test the connection\r\n+      const response = await groq.chat.completions.create({\r\n+        messages: [\r\n+          {\r\n+            role: \"system\",\r\n+            content: \"You are a helpful energy analysis assistant.\"\r\n+          },\r\n+          {\r\n+            role: \"user\",\r\n+            content: message\r\n+          }\r\n+        ],\r\n         model: \"mixtral-8x7b-32768\",\r\n         temperature: 0.7,\r\n-        max_tokens: 1000,\r\n-        top_p: 1,\r\n-        stream: false\r\n+        max_tokens: 1000\r\n       });\r\n \r\n-      debugLog('Received response from Groq:', completion);\r\n+      console.log('=== GROQ RESPONSE RECEIVED ===');\r\n+      console.log('Response:', response);\r\n \r\n       // Add system response\r\n       const systemMessage = {\r\n         id: Date.now(),\r\n         type: 'system',\r\n-        content: completion.choices[0].message.content,\r\n+        content: response.choices[0].message.content,\r\n         timestamp: new Date()\r\n       };\r\n \r\n       setMessages(prev => [...prev, systemMessage]);\r\n \r\n     } catch (error) {\r\n-      debugLog('Error in handleNewMessage:', error);\r\n-      console.error('Detailed error:', error);\r\n+      console.error('=== ERROR IN CHAT INTERFACE ===');\r\n+      console.error('Error details:', {\r\n+        message: error.message,\r\n+        stack: error.stack,\r\n+        type: error.constructor.name\r\n+      });\r\n       \r\n-      // Create more informative error message\r\n-      let errorMessage = {\r\n+      // Add error message\r\n+      const errorMessage = {\r\n         id: Date.now(),\r\n         type: 'system',\r\n-        content: error.message || \"An error occurred while processing your request.\",\r\n+        content: `Error: ${error.message}`,\r\n         isError: true,\r\n         timestamp: new Date()\r\n       };\r\n \r\n-      // Add more specific error messages based on error type\r\n-      if (!process.env.NEXT_PUBLIC_GROQ_API_KEY) {\r\n-        errorMessage.content = \"API key is missing. Please check your environment configuration.\";\r\n-      } else if (error.message.includes('API key')) {\r\n-        errorMessage.content = \"Invalid API key. Please check your configuration.\";\r\n-      } else if (error.message.includes('network')) {\r\n-        errorMessage.content = \"Network error occurred. Please check your internet connection.\";\r\n-      }\r\n+      setMessages(prev => [...prev, errorMessage]);\r\n+      \r\n+      // Update debug info with error\r\n+      setDebugInfo(prev => ({\r\n+        ...prev,\r\n+        lastError: error.message,\r\n+        errorTime: new Date().toISOString()\r\n+      }));\r\n \r\n-      setMessages(prev => [...prev, errorMessage]);\r\n     } finally {\r\n       setIsProcessing(false);\r\n     }\r\n   };\r\n \r\n-  // Debug: Log whenever messages state changes\r\n-  useEffect(() => {\r\n-    debugLog('Messages updated:', messages);\r\n-  }, [messages]);\r\n-\r\n   return (\r\n     <Card className=\"h-[600px] flex flex-col\">\r\n+      {/* Debug Panel */}\r\n+      <div className=\"bg-yellow-100 p-2 text-xs font-mono\">\r\n+        <div>Debug Info:</div>\r\n+        <pre className=\"whitespace-pre-wrap\">\r\n+          {JSON.stringify(debugInfo, null, 2)}\r\n+        </pre>\r\n+      </div>\r\n+\r\n       <div className=\"flex-1 overflow-y-auto p-4\">\r\n-        {/* Debug info at the top if DEBUG is true */}\r\n-        {DEBUG && (\r\n-          <div className=\"mb-4 p-2 bg-gray-100 rounded text-xs\">\r\n-            <div>Energy Data Points: {energyData?.length || 0}</div>\r\n-            <div>API Key Present: {process.env.NEXT_PUBLIC_GROQ_API_KEY ? 'Yes' : 'No'}</div>\r\n-            <div>Message Count: {messages.length}</div>\r\n-          </div>\r\n-        )}\r\n         <MessageList messages={messages} />\r\n         <div ref={chatEndRef} />\r\n       </div>\r\n+\r\n       <InputArea \r\n         onSubmit={handleNewMessage}\r\n         isProcessing={isProcessing}\r\n       />\r\n"
                },
                {
                    "date": 1730304595896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+import React, { useState, useRef, useEffect } from 'react';\r\n+import { Card } from '@/components/ui/card';\r\n+import MessageList from './MessageList';\r\n+import InputArea from './InputArea';\r\n+\r\n+\r\n+const ChatInterface = ({ energyData }) => {\r\n+  const [messages, setMessages] = useState([]);\r\n+  const [isProcessing, setIsProcessing] = useState(false);\r\n+  const [debugInfo, setDebugInfo] = useState({});\r\n+  const chatEndRef = useRef(null);\r\n+\r\n+  // Immediately log initial state\r\n+  useEffect(() => {\r\n+    console.log('=== CHAT INTERFACE MOUNTED ===');\r\n+    console.log('Energy Data:', energyData);\r\n+    console.log('GROQ API Key present:', !!process.env.NEXT_PUBLIC_GROQ_API_KEY);\r\n+    \r\n+    setDebugInfo({\r\n+      energyDataPresent: !!energyData,\r\n+      energyDataLength: energyData?.length || 0,\r\n+      apiKeyPresent: !!process.env.NEXT_PUBLIC_GROQ_API_KEY,\r\n+      timestamp: new Date().toISOString()\r\n+    });\r\n+  }, [energyData]);\r\n+\r\n+  useEffect(() => {\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+  }, [messages]);\r\n+\r\n+  const handleNewMessage = async (message) => {\r\n+    console.log('=== NEW MESSAGE RECEIVED ===');\r\n+    console.log('Message:', message);\r\n+    console.log('Current State:', {\r\n+      messagesCount: messages.length,\r\n+      isProcessing,\r\n+      energyDataPresent: !!energyData\r\n+    });\r\n+\r\n+    // Update debug info\r\n+    setDebugInfo(prev => ({\r\n+      ...prev,\r\n+      lastMessage: message,\r\n+      lastMessageTime: new Date().toISOString()\r\n+    }));\r\n+\r\n+    // Add user message\r\n+    const userMessage = {\r\n+      id: Date.now(),\r\n+      type: 'user',\r\n+      content: message,\r\n+      timestamp: new Date()\r\n+    };\r\n+    \r\n+    setMessages(prev => [...prev, userMessage]);\r\n+    setIsProcessing(true);\r\n+\r\n+    try {\r\n+      // First, let's validate our setup\r\n+      if (!process.env.NEXT_PUBLIC_GROQ_API_KEY) {\r\n+        throw new Error('GROQ API key is not configured');\r\n+      }\r\n+\r\n+      if (!energyData || !Array.isArray(energyData)) {\r\n+        throw new Error('Energy data is not properly configured');\r\n+      }\r\n+\r\n+      console.log('=== PREPARING GROQ REQUEST ===');\r\n+      const { default: Groq } = await import('groq-sdk');\r\n+      \r\n+      // Initialize Groq\r\n+      const groq = new Groq({\r\n+        apiKey: process.env.NEXT_PUBLIC_GROQ_API_KEY\r\n+      });\r\n+\r\n+      console.log('Groq SDK initialized');\r\n+\r\n+      // Create a simple response first to test the connection\r\n+      const response = await groq.chat.completions.create({\r\n+        messages: [\r\n+          {\r\n+            role: \"system\",\r\n+            content: \"You are a helpful energy analysis assistant.\"\r\n+          },\r\n+          {\r\n+            role: \"user\",\r\n+            content: message\r\n+          }\r\n+        ],\r\n+        model: \"mixtral-8x7b-32768\",\r\n+        temperature: 0.7,\r\n+        max_tokens: 1000\r\n+      });\r\n+\r\n+      console.log('=== GROQ RESPONSE RECEIVED ===');\r\n+      console.log('Response:', response);\r\n+\r\n+      // Add system response\r\n+      const systemMessage = {\r\n+        id: Date.now(),\r\n+        type: 'system',\r\n+        content: response.choices[0].message.content,\r\n+        timestamp: new Date()\r\n+      };\r\n+\r\n+      setMessages(prev => [...prev, systemMessage]);\r\n+\r\n+    } catch (error) {\r\n+      console.error('=== ERROR IN CHAT INTERFACE ===');\r\n+      console.error('Error details:', {\r\n+        message: error.message,\r\n+        stack: error.stack,\r\n+        type: error.constructor.name\r\n+      });\r\n+      \r\n+      // Add error message\r\n+      const errorMessage = {\r\n+        id: Date.now(),\r\n+        type: 'system',\r\n+        content: `Error: ${error.message}`,\r\n+        isError: true,\r\n+        timestamp: new Date()\r\n+      };\r\n+\r\n+      setMessages(prev => [...prev, errorMessage]);\r\n+      \r\n+      // Update debug info with error\r\n+      setDebugInfo(prev => ({\r\n+        ...prev,\r\n+        lastError: error.message,\r\n+        errorTime: new Date().toISOString()\r\n+      }));\r\n+\r\n+    } finally {\r\n+      setIsProcessing(false);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <Card className=\"h-[600px] flex flex-col\">\r\n+      {/* Debug Panel */}\r\n+      <div className=\"bg-yellow-100 p-2 text-xs font-mono\">\r\n+        <div>Debug Info:</div>\r\n+        <pre className=\"whitespace-pre-wrap\">\r\n+          {JSON.stringify(debugInfo, null, 2)}\r\n+        </pre>\r\n+      </div>\r\n+\r\n+      <div className=\"flex-1 overflow-y-auto p-4\">\r\n+        <MessageList messages={messages} />\r\n+        <div ref={chatEndRef} />\r\n+      </div>\r\n+\r\n+      <InputArea \r\n+        onSubmit={handleNewMessage}\r\n+        isProcessing={isProcessing}\r\n+      />\r\n+    </Card>\r\n+  );\r\n+};\r\n+\r\n+export default ChatInterface;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730304618222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,303 +1,134 @@\n-import React, { useState, useRef, useEffect } from 'react';\r\n-import { Card } from '@/components/ui/card';\r\n-import MessageList from './MessageList';\r\n-import InputArea from './InputArea';\r\n+import React, { useState, useRef, useEffect } from \"react\";\r\n+import { Card } from \"@/components/ui/card\";\r\n+import MessageList from \"./MessageList\";\r\n+import InputArea from \"./InputArea\";\r\n \r\n-\r\n const ChatInterface = ({ energyData }) => {\r\n   const [messages, setMessages] = useState([]);\r\n   const [isProcessing, setIsProcessing] = useState(false);\r\n   const [debugInfo, setDebugInfo] = useState({});\r\n   const chatEndRef = useRef(null);\r\n \r\n   // Immediately log initial state\r\n   useEffect(() => {\r\n-    console.log('=== CHAT INTERFACE MOUNTED ===');\r\n-    console.log('Energy Data:', energyData);\r\n-    console.log('GROQ API Key present:', !!process.env.NEXT_PUBLIC_GROQ_API_KEY);\r\n-    \r\n+    console.log(\"=== CHAT INTERFACE MOUNTED ===\");\r\n+    console.log(\"Energy Data:\", energyData);\r\n+    console.log(\"GROQ API Key present:\", !!process.env.REACT_APP_GROQ_API_KEY);\r\n+\r\n     setDebugInfo({\r\n       energyDataPresent: !!energyData,\r\n       energyDataLength: energyData?.length || 0,\r\n-      apiKeyPresent: !!process.env.NEXT_PUBLIC_GROQ_API_KEY,\r\n-      timestamp: new Date().toISOString()\r\n+      apiKeyPresent: !!process.env.REACT_APP_GROQ_API_KEY,\r\n+      timestamp: new Date().toISOString(),\r\n     });\r\n   }, [energyData]);\r\n \r\n   useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+    chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages]);\r\n \r\n   const handleNewMessage = async (message) => {\r\n-    console.log('=== NEW MESSAGE RECEIVED ===');\r\n-    console.log('Message:', message);\r\n-    console.log('Current State:', {\r\n+    console.log(\"=== NEW MESSAGE RECEIVED ===\");\r\n+    console.log(\"Message:\", message);\r\n+    console.log(\"Current State:\", {\r\n       messagesCount: messages.length,\r\n       isProcessing,\r\n-      energyDataPresent: !!energyData\r\n+      energyDataPresent: !!energyData,\r\n     });\r\n \r\n     // Update debug info\r\n-    setDebugInfo(prev => ({\r\n+    setDebugInfo((prev) => ({\r\n       ...prev,\r\n       lastMessage: message,\r\n-      lastMessageTime: new Date().toISOString()\r\n+      lastMessageTime: new Date().toISOString(),\r\n     }));\r\n \r\n     // Add user message\r\n     const userMessage = {\r\n       id: Date.now(),\r\n-      type: 'user',\r\n+      type: \"user\",\r\n       content: message,\r\n-      timestamp: new Date()\r\n+      timestamp: new Date(),\r\n     };\r\n-    \r\n-    setMessages(prev => [...prev, userMessage]);\r\n+\r\n+    setMessages((prev) => [...prev, userMessage]);\r\n     setIsProcessing(true);\r\n \r\n     try {\r\n       // First, let's validate our setup\r\n       if (!process.env.NEXT_PUBLIC_GROQ_API_KEY) {\r\n-        throw new Error('GROQ API key is not configured');\r\n+        throw new Error(\"GROQ API key is not configured\");\r\n       }\r\n \r\n       if (!energyData || !Array.isArray(energyData)) {\r\n-        throw new Error('Energy data is not properly configured');\r\n+        throw new Error(\"Energy data is not properly configured\");\r\n       }\r\n \r\n-      console.log('=== PREPARING GROQ REQUEST ===');\r\n-      const { default: Groq } = await import('groq-sdk');\r\n-      \r\n+      console.log(\"=== PREPARING GROQ REQUEST ===\");\r\n+      const { default: Groq } = await import(\"groq-sdk\");\r\n+\r\n       // Initialize Groq\r\n       const groq = new Groq({\r\n-        apiKey: process.env.NEXT_PUBLIC_GROQ_API_KEY\r\n+        apiKey: process.env.NEXT_PUBLIC_GROQ_API_KEY,\r\n       });\r\n \r\n-      console.log('Groq SDK initialized');\r\n+      console.log(\"Groq SDK initialized\");\r\n \r\n       // Create a simple response first to test the connection\r\n       const response = await groq.chat.completions.create({\r\n         messages: [\r\n           {\r\n             role: \"system\",\r\n-            content: \"You are a helpful energy analysis assistant.\"\r\n+            content: \"You are a helpful energy analysis assistant.\",\r\n           },\r\n           {\r\n             role: \"user\",\r\n-            content: message\r\n-          }\r\n+            content: message,\r\n+          },\r\n         ],\r\n         model: \"mixtral-8x7b-32768\",\r\n         temperature: 0.7,\r\n-        max_tokens: 1000\r\n+        max_tokens: 1000,\r\n       });\r\n \r\n-      console.log('=== GROQ RESPONSE RECEIVED ===');\r\n-      console.log('Response:', response);\r\n+      console.log(\"=== GROQ RESPONSE RECEIVED ===\");\r\n+      console.log(\"Response:\", response);\r\n \r\n       // Add system response\r\n       const systemMessage = {\r\n         id: Date.now(),\r\n-        type: 'system',\r\n+        type: \"system\",\r\n         content: response.choices[0].message.content,\r\n-        timestamp: new Date()\r\n+        timestamp: new Date(),\r\n       };\r\n \r\n-      setMessages(prev => [...prev, systemMessage]);\r\n-\r\n+      setMessages((prev) => [...prev, systemMessage]);\r\n     } catch (error) {\r\n-      console.error('=== ERROR IN CHAT INTERFACE ===');\r\n-      console.error('Error details:', {\r\n+      console.error(\"=== ERROR IN CHAT INTERFACE ===\");\r\n+      console.error(\"Error details:\", {\r\n         message: error.message,\r\n         stack: error.stack,\r\n-        type: error.constructor.name\r\n+        type: error.constructor.name,\r\n       });\r\n-      \r\n+\r\n       // Add error message\r\n       const errorMessage = {\r\n         id: Date.now(),\r\n-        type: 'system',\r\n+        type: \"system\",\r\n         content: `Error: ${error.message}`,\r\n         isError: true,\r\n-        timestamp: new Date()\r\n+        timestamp: new Date(),\r\n       };\r\n \r\n-      setMessages(prev => [...prev, errorMessage]);\r\n-      \r\n-      // Update debug info with error\r\n-      setDebugInfo(prev => ({\r\n-        ...prev,\r\n-        lastError: error.message,\r\n-        errorTime: new Date().toISOString()\r\n-      }));\r\n+      setMessages((prev) => [...prev, errorMessage]);\r\n \r\n-    } finally {\r\n-      setIsProcessing(false);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <Card className=\"h-[600px] flex flex-col\">\r\n-      {/* Debug Panel */}\r\n-      <div className=\"bg-yellow-100 p-2 text-xs font-mono\">\r\n-        <div>Debug Info:</div>\r\n-        <pre className=\"whitespace-pre-wrap\">\r\n-          {JSON.stringify(debugInfo, null, 2)}\r\n-        </pre>\r\n-      </div>\r\n-\r\n-      <div className=\"flex-1 overflow-y-auto p-4\">\r\n-        <MessageList messages={messages} />\r\n-        <div ref={chatEndRef} />\r\n-      </div>\r\n-\r\n-      <InputArea \r\n-        onSubmit={handleNewMessage}\r\n-        isProcessing={isProcessing}\r\n-      />\r\n-    </Card>\r\n-  );\r\n-};\r\n-\r\n-export default ChatInterface;\n-import React, { useState, useRef, useEffect } from 'react';\r\n-import { Card } from '@/components/ui/card';\r\n-import MessageList from './MessageList';\r\n-import InputArea from './InputArea';\r\n-\r\n-// Force debug logs regardless of environment\r\n-const debugLog = (...args) => {\r\n-  console.log('%c[ChatDebug]', 'background: #ffd700; color: black; padding: 2px 4px; border-radius: 2px;', ...args);\r\n-};\r\n-\r\n-const ChatInterface = ({ energyData }) => {\r\n-  const [messages, setMessages] = useState([]);\r\n-  const [isProcessing, setIsProcessing] = useState(false);\r\n-  const [debugInfo, setDebugInfo] = useState({});\r\n-  const chatEndRef = useRef(null);\r\n-\r\n-  // Immediately log initial state\r\n-  useEffect(() => {\r\n-    console.log('=== CHAT INTERFACE MOUNTED ===');\r\n-    console.log('Energy Data:', energyData);\r\n-    console.log('GROQ API Key present:', !!process.env.NEXT_PUBLIC_GROQ_API_KEY);\r\n-    \r\n-    setDebugInfo({\r\n-      energyDataPresent: !!energyData,\r\n-      energyDataLength: energyData?.length || 0,\r\n-      apiKeyPresent: !!process.env.NEXT_PUBLIC_GROQ_API_KEY,\r\n-      timestamp: new Date().toISOString()\r\n-    });\r\n-  }, [energyData]);\r\n-\r\n-  useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n-  }, [messages]);\r\n-\r\n-  const handleNewMessage = async (message) => {\r\n-    console.log('=== NEW MESSAGE RECEIVED ===');\r\n-    console.log('Message:', message);\r\n-    console.log('Current State:', {\r\n-      messagesCount: messages.length,\r\n-      isProcessing,\r\n-      energyDataPresent: !!energyData\r\n-    });\r\n-\r\n-    // Update debug info\r\n-    setDebugInfo(prev => ({\r\n-      ...prev,\r\n-      lastMessage: message,\r\n-      lastMessageTime: new Date().toISOString()\r\n-    }));\r\n-\r\n-    // Add user message\r\n-    const userMessage = {\r\n-      id: Date.now(),\r\n-      type: 'user',\r\n-      content: message,\r\n-      timestamp: new Date()\r\n-    };\r\n-    \r\n-    setMessages(prev => [...prev, userMessage]);\r\n-    setIsProcessing(true);\r\n-\r\n-    try {\r\n-      // First, let's validate our setup\r\n-      if (!process.env.NEXT_PUBLIC_GROQ_API_KEY) {\r\n-        throw new Error('GROQ API key is not configured');\r\n-      }\r\n-\r\n-      if (!energyData || !Array.isArray(energyData)) {\r\n-        throw new Error('Energy data is not properly configured');\r\n-      }\r\n-\r\n-      console.log('=== PREPARING GROQ REQUEST ===');\r\n-      const { default: Groq } = await import('groq-sdk');\r\n-      \r\n-      // Initialize Groq\r\n-      const groq = new Groq({\r\n-        apiKey: process.env.NEXT_PUBLIC_GROQ_API_KEY\r\n-      });\r\n-\r\n-      console.log('Groq SDK initialized');\r\n-\r\n-      // Create a simple response first to test the connection\r\n-      const response = await groq.chat.completions.create({\r\n-        messages: [\r\n-          {\r\n-            role: \"system\",\r\n-            content: \"You are a helpful energy analysis assistant.\"\r\n-          },\r\n-          {\r\n-            role: \"user\",\r\n-            content: message\r\n-          }\r\n-        ],\r\n-        model: \"mixtral-8x7b-32768\",\r\n-        temperature: 0.7,\r\n-        max_tokens: 1000\r\n-      });\r\n-\r\n-      console.log('=== GROQ RESPONSE RECEIVED ===');\r\n-      console.log('Response:', response);\r\n-\r\n-      // Add system response\r\n-      const systemMessage = {\r\n-        id: Date.now(),\r\n-        type: 'system',\r\n-        content: response.choices[0].message.content,\r\n-        timestamp: new Date()\r\n-      };\r\n-\r\n-      setMessages(prev => [...prev, systemMessage]);\r\n-\r\n-    } catch (error) {\r\n-      console.error('=== ERROR IN CHAT INTERFACE ===');\r\n-      console.error('Error details:', {\r\n-        message: error.message,\r\n-        stack: error.stack,\r\n-        type: error.constructor.name\r\n-      });\r\n-      \r\n-      // Add error message\r\n-      const errorMessage = {\r\n-        id: Date.now(),\r\n-        type: 'system',\r\n-        content: `Error: ${error.message}`,\r\n-        isError: true,\r\n-        timestamp: new Date()\r\n-      };\r\n-\r\n-      setMessages(prev => [...prev, errorMessage]);\r\n-      \r\n       // Update debug info with error\r\n-      setDebugInfo(prev => ({\r\n+      setDebugInfo((prev) => ({\r\n         ...prev,\r\n         lastError: error.message,\r\n-        errorTime: new Date().toISOString()\r\n+        errorTime: new Date().toISOString(),\r\n       }));\r\n-\r\n     } finally {\r\n       setIsProcessing(false);\r\n     }\r\n   };\r\n@@ -316,13 +147,10 @@\n         <MessageList messages={messages} />\r\n         <div ref={chatEndRef} />\r\n       </div>\r\n \r\n-      <InputArea \r\n-        onSubmit={handleNewMessage}\r\n-        isProcessing={isProcessing}\r\n-      />\r\n+      <InputArea onSubmit={handleNewMessage} isProcessing={isProcessing} />\r\n     </Card>\r\n   );\r\n };\r\n \r\n\\ No newline at end of file\n-export default ChatInterface;\n+export default ChatInterface;\r\n"
                },
                {
                    "date": 1730304639796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,10 +55,10 @@\n     setIsProcessing(true);\r\n \r\n     try {\r\n       // First, let's validate our setup\r\n-      if (!process.env.NEXT_PUBLIC_GROQ_API_KEY) {\r\n-        throw new Error(\"GROQ API key is not configured\");\r\n+      if (!process.env.REACT_APP_GROQ_API_KEY) {\r\n+        throw new Error('GROQ API key is not configured');\r\n       }\r\n \r\n       if (!energyData || !Array.isArray(energyData)) {\r\n         throw new Error(\"Energy data is not properly configured\");\r\n@@ -152,5 +152,5 @@\n     </Card>\r\n   );\r\n };\r\n \r\n-export default ChatInterface;\n\\ No newline at end of file\n+export default ChatInterface;\r\n"
                },
                {
                    "date": 1730304649600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,11 +68,11 @@\n       const { default: Groq } = await import(\"groq-sdk\");\r\n \r\n       // Initialize Groq\r\n       const groq = new Groq({\r\n-        apiKey: process.env.NEXT_PUBLIC_GROQ_API_KEY,\r\n+        apiKey: process.env.REACT_APP_GROQ_API_KEY\r\n       });\r\n-\r\n+      \r\n       console.log(\"Groq SDK initialized\");\r\n \r\n       // Create a simple response first to test the connection\r\n       const response = await groq.chat.completions.create({\r\n"
                },
                {
                    "date": 1730304686405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \r\n     try {\r\n       // First, let's validate our setup\r\n       if (!process.env.REACT_APP_GROQ_API_KEY) {\r\n-        throw new Error('GROQ API key is not configured');\r\n+        throw new Error(\"GROQ API key is not configured\");\r\n       }\r\n \r\n       if (!energyData || !Array.isArray(energyData)) {\r\n         throw new Error(\"Energy data is not properly configured\");\r\n@@ -68,11 +68,11 @@\n       const { default: Groq } = await import(\"groq-sdk\");\r\n \r\n       // Initialize Groq\r\n       const groq = new Groq({\r\n-        apiKey: process.env.REACT_APP_GROQ_API_KEY\r\n+        apiKey: process.env.REACT_APP_GROQ_API_KEY,\r\n       });\r\n-      \r\n+\r\n       console.log(\"Groq SDK initialized\");\r\n \r\n       // Create a simple response first to test the connection\r\n       const response = await groq.chat.completions.create({\r\n"
                },
                {
                    "date": 1730305364887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,108 +27,62 @@\n     chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages]);\r\n \r\n   const handleNewMessage = async (message) => {\r\n-    console.log(\"=== NEW MESSAGE RECEIVED ===\");\r\n-    console.log(\"Message:\", message);\r\n-    console.log(\"Current State:\", {\r\n-      messagesCount: messages.length,\r\n-      isProcessing,\r\n-      energyDataPresent: !!energyData,\r\n-    });\r\n-\r\n-    // Update debug info\r\n-    setDebugInfo((prev) => ({\r\n-      ...prev,\r\n-      lastMessage: message,\r\n-      lastMessageTime: new Date().toISOString(),\r\n-    }));\r\n-\r\n-    // Add user message\r\n     const userMessage = {\r\n       id: Date.now(),\r\n-      type: \"user\",\r\n+      type: 'user',\r\n       content: message,\r\n-      timestamp: new Date(),\r\n+      timestamp: new Date()\r\n     };\r\n-\r\n-    setMessages((prev) => [...prev, userMessage]);\r\n+    \r\n+    setMessages(prev => [...prev, userMessage]);\r\n     setIsProcessing(true);\r\n-\r\n+  \r\n     try {\r\n-      // First, let's validate our setup\r\n-      if (!process.env.REACT_APP_GROQ_API_KEY) {\r\n-        throw new Error(\"GROQ API key is not configured\");\r\n-      }\r\n-\r\n-      if (!energyData || !Array.isArray(energyData)) {\r\n-        throw new Error(\"Energy data is not properly configured\");\r\n-      }\r\n-\r\n-      console.log(\"=== PREPARING GROQ REQUEST ===\");\r\n-      const { default: Groq } = await import(\"groq-sdk\");\r\n-\r\n-      // Initialize Groq\r\n+      const { default: Groq } = await import('groq-sdk');\r\n+      \r\n       const groq = new Groq({\r\n         apiKey: process.env.REACT_APP_GROQ_API_KEY,\r\n+        dangerouslyAllowBrowser: true  // Enable browser usage\r\n       });\r\n-\r\n-      console.log(\"Groq SDK initialized\");\r\n-\r\n-      // Create a simple response first to test the connection\r\n-      const response = await groq.chat.completions.create({\r\n+  \r\n+      const completion = await groq.chat.completions.create({\r\n         messages: [\r\n           {\r\n             role: \"system\",\r\n-            content: \"You are a helpful energy analysis assistant.\",\r\n+            content: \"You are an energy analysis assistant. Be concise but helpful.\"\r\n           },\r\n           {\r\n             role: \"user\",\r\n-            content: message,\r\n-          },\r\n+            content: message\r\n+          }\r\n         ],\r\n         model: \"mixtral-8x7b-32768\",\r\n         temperature: 0.7,\r\n-        max_tokens: 1000,\r\n+        max_tokens: 1000\r\n       });\r\n-\r\n-      console.log(\"=== GROQ RESPONSE RECEIVED ===\");\r\n-      console.log(\"Response:\", response);\r\n-\r\n-      // Add system response\r\n+  \r\n       const systemMessage = {\r\n         id: Date.now(),\r\n-        type: \"system\",\r\n-        content: response.choices[0].message.content,\r\n-        timestamp: new Date(),\r\n+        type: 'system',\r\n+        content: completion.choices[0].message.content,\r\n+        timestamp: new Date()\r\n       };\r\n-\r\n-      setMessages((prev) => [...prev, systemMessage]);\r\n+  \r\n+      setMessages(prev => [...prev, systemMessage]);\r\n     } catch (error) {\r\n-      console.error(\"=== ERROR IN CHAT INTERFACE ===\");\r\n-      console.error(\"Error details:\", {\r\n-        message: error.message,\r\n-        stack: error.stack,\r\n-        type: error.constructor.name,\r\n-      });\r\n-\r\n-      // Add error message\r\n+      console.error('Chat error:', error);\r\n+      \r\n       const errorMessage = {\r\n         id: Date.now(),\r\n-        type: \"system\",\r\n+        type: 'system',\r\n         content: `Error: ${error.message}`,\r\n         isError: true,\r\n-        timestamp: new Date(),\r\n+        timestamp: new Date()\r\n       };\r\n-\r\n-      setMessages((prev) => [...prev, errorMessage]);\r\n-\r\n-      // Update debug info with error\r\n-      setDebugInfo((prev) => ({\r\n-        ...prev,\r\n-        lastError: error.message,\r\n-        errorTime: new Date().toISOString(),\r\n-      }));\r\n+  \r\n+      setMessages(prev => [...prev, errorMessage]);\r\n     } finally {\r\n       setIsProcessing(false);\r\n     }\r\n   };\r\n"
                },
                {
                    "date": 1730305475249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,68 +26,66 @@\n   useEffect(() => {\r\n     chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n   }, [messages]);\r\n \r\n-  const handleNewMessage = async (message) => {\r\n-    const userMessage = {\r\n+  \r\n+const handleNewMessage = async (message) => {\r\n+  const userMessage = {\r\n+    id: Date.now(),\r\n+    type: 'user',\r\n+    content: message,\r\n+    timestamp: new Date()\r\n+  };\r\n+  \r\n+  setMessages(prev => [...prev, userMessage]);\r\n+  setIsProcessing(true);\r\n+\r\n+  try {\r\n+    const groq = new Groq({\r\n+      apiKey: process.env.REACT_APP_GROQ_API_KEY,\r\n+      dangerouslyAllowBrowser: true\r\n+    });\r\n+\r\n+    const completion = await groq.chat.completions.create({\r\n+      messages: [\r\n+        {\r\n+          role: \"system\",\r\n+          content: \"You are an energy analysis assistant. Be concise but helpful.\"\r\n+        },\r\n+        {\r\n+          role: \"user\",\r\n+          content: message\r\n+        }\r\n+      ],\r\n+      model: \"mixtral-8x7b-32768\",\r\n+      temperature: 0.7,\r\n+      max_tokens: 1000\r\n+    });\r\n+\r\n+    const systemMessage = {\r\n       id: Date.now(),\r\n-      type: 'user',\r\n-      content: message,\r\n+      type: 'system',\r\n+      content: completion.choices[0].message.content,\r\n       timestamp: new Date()\r\n     };\r\n+\r\n+    setMessages(prev => [...prev, systemMessage]);\r\n+  } catch (error) {\r\n+    console.error('Chat error:', error);\r\n     \r\n-    setMessages(prev => [...prev, userMessage]);\r\n-    setIsProcessing(true);\r\n-  \r\n-    try {\r\n-      const { default: Groq } = await import('groq-sdk');\r\n-      \r\n-      const groq = new Groq({\r\n-        apiKey: process.env.REACT_APP_GROQ_API_KEY,\r\n-        dangerouslyAllowBrowser: true  // Enable browser usage\r\n-      });\r\n-  \r\n-      const completion = await groq.chat.completions.create({\r\n-        messages: [\r\n-          {\r\n-            role: \"system\",\r\n-            content: \"You are an energy analysis assistant. Be concise but helpful.\"\r\n-          },\r\n-          {\r\n-            role: \"user\",\r\n-            content: message\r\n-          }\r\n-        ],\r\n-        model: \"mixtral-8x7b-32768\",\r\n-        temperature: 0.7,\r\n-        max_tokens: 1000\r\n-      });\r\n-  \r\n-      const systemMessage = {\r\n-        id: Date.now(),\r\n-        type: 'system',\r\n-        content: completion.choices[0].message.content,\r\n-        timestamp: new Date()\r\n-      };\r\n-  \r\n-      setMessages(prev => [...prev, systemMessage]);\r\n-    } catch (error) {\r\n-      console.error('Chat error:', error);\r\n-      \r\n-      const errorMessage = {\r\n-        id: Date.now(),\r\n-        type: 'system',\r\n-        content: `Error: ${error.message}`,\r\n-        isError: true,\r\n-        timestamp: new Date()\r\n-      };\r\n-  \r\n-      setMessages(prev => [...prev, errorMessage]);\r\n-    } finally {\r\n-      setIsProcessing(false);\r\n-    }\r\n-  };\r\n+    const errorMessage = {\r\n+      id: Date.now(),\r\n+      type: 'system',\r\n+      content: `Error: ${error.message}`,\r\n+      isError: true,\r\n+      timestamp: new Date()\r\n+    };\r\n \r\n+    setMessages(prev => [...prev, errorMessage]);\r\n+  } finally {\r\n+    setIsProcessing(false);\r\n+  }\r\n+};\r\n   return (\r\n     <Card className=\"h-[600px] flex flex-col\">\r\n       {/* Debug Panel */}\r\n       <div className=\"bg-yellow-100 p-2 text-xs font-mono\">\r\n"
                },
                {
                    "date": 1730305483230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import React, { useState, useRef, useEffect } from \"react\";\r\n import { Card } from \"@/components/ui/card\";\r\n import MessageList from \"./MessageList\";\r\n import InputArea from \"./InputArea\";\r\n+import Groq from 'groq-sdk';\r\n \r\n const ChatInterface = ({ energyData }) => {\r\n   const [messages, setMessages] = useState([]);\r\n   const [isProcessing, setIsProcessing] = useState(false);\r\n"
                },
                {
                    "date": 1730305558587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,109 +1,91 @@\n-import React, { useState, useRef, useEffect } from \"react\";\r\n-import { Card } from \"@/components/ui/card\";\r\n-import MessageList from \"./MessageList\";\r\n-import InputArea from \"./InputArea\";\r\n+import React, { useState, useRef, useEffect } from 'react';\r\n+import { Card } from '@/components/ui/card';\r\n+import MessageList from './MessageList';\r\n+import InputArea from './InputArea';\r\n import Groq from 'groq-sdk';\r\n \r\n const ChatInterface = ({ energyData }) => {\r\n   const [messages, setMessages] = useState([]);\r\n   const [isProcessing, setIsProcessing] = useState(false);\r\n-  const [debugInfo, setDebugInfo] = useState({});\r\n   const chatEndRef = useRef(null);\r\n \r\n-  // Immediately log initial state\r\n   useEffect(() => {\r\n-    console.log(\"=== CHAT INTERFACE MOUNTED ===\");\r\n-    console.log(\"Energy Data:\", energyData);\r\n-    console.log(\"GROQ API Key present:\", !!process.env.REACT_APP_GROQ_API_KEY);\r\n+    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n+  }, [messages]);\r\n \r\n-    setDebugInfo({\r\n-      energyDataPresent: !!energyData,\r\n-      energyDataLength: energyData?.length || 0,\r\n-      apiKeyPresent: !!process.env.REACT_APP_GROQ_API_KEY,\r\n-      timestamp: new Date().toISOString(),\r\n-    });\r\n-  }, [energyData]);\r\n+  const handleNewMessage = async (message) => {\r\n+    const userMessage = {\r\n+      id: Date.now(),\r\n+      type: 'user',\r\n+      content: message,\r\n+      timestamp: new Date()\r\n+    };\r\n+    \r\n+    setMessages(prev => [...prev, userMessage]);\r\n+    setIsProcessing(true);\r\n \r\n-  useEffect(() => {\r\n-    chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n-  }, [messages]);\r\n+    try {\r\n+      // Initialize Groq with browser option\r\n+      const groq = new Groq({\r\n+        apiKey: process.env.REACT_APP_GROQ_API_KEY,\r\n+        dangerouslyAllowBrowser: true,\r\n+        baseURL: 'https://api.groq.com/v1'\r\n+      });\r\n \r\n-  \r\n-const handleNewMessage = async (message) => {\r\n-  const userMessage = {\r\n-    id: Date.now(),\r\n-    type: 'user',\r\n-    content: message,\r\n-    timestamp: new Date()\r\n-  };\r\n-  \r\n-  setMessages(prev => [...prev, userMessage]);\r\n-  setIsProcessing(true);\r\n+      const completion = await groq.chat.completions.create({\r\n+        messages: [\r\n+          {\r\n+            role: \"system\",\r\n+            content: \"You are an energy analysis assistant. Be concise but helpful.\"\r\n+          },\r\n+          {\r\n+            role: \"user\",\r\n+            content: message\r\n+          }\r\n+        ],\r\n+        model: \"mixtral-8x7b-32768\",\r\n+        temperature: 0.7,\r\n+        max_tokens: 1000\r\n+      });\r\n \r\n-  try {\r\n-    const groq = new Groq({\r\n-      apiKey: process.env.REACT_APP_GROQ_API_KEY,\r\n-      dangerouslyAllowBrowser: true\r\n-    });\r\n+      const systemMessage = {\r\n+        id: Date.now(),\r\n+        type: 'system',\r\n+        content: completion.choices[0].message.content,\r\n+        timestamp: new Date()\r\n+      };\r\n \r\n-    const completion = await groq.chat.completions.create({\r\n-      messages: [\r\n-        {\r\n-          role: \"system\",\r\n-          content: \"You are an energy analysis assistant. Be concise but helpful.\"\r\n-        },\r\n-        {\r\n-          role: \"user\",\r\n-          content: message\r\n-        }\r\n-      ],\r\n-      model: \"mixtral-8x7b-32768\",\r\n-      temperature: 0.7,\r\n-      max_tokens: 1000\r\n-    });\r\n+      setMessages(prev => [...prev, systemMessage]);\r\n+    } catch (error) {\r\n+      console.error('Chat error:', error);\r\n+      \r\n+      const errorMessage = {\r\n+        id: Date.now(),\r\n+        type: 'system',\r\n+        content: `Error: ${error.message}`,\r\n+        isError: true,\r\n+        timestamp: new Date()\r\n+      };\r\n \r\n-    const systemMessage = {\r\n-      id: Date.now(),\r\n-      type: 'system',\r\n-      content: completion.choices[0].message.content,\r\n-      timestamp: new Date()\r\n-    };\r\n+      setMessages(prev => [...prev, errorMessage]);\r\n+    } finally {\r\n+      setIsProcessing(false);\r\n+    }\r\n+  };\r\n \r\n-    setMessages(prev => [...prev, systemMessage]);\r\n-  } catch (error) {\r\n-    console.error('Chat error:', error);\r\n-    \r\n-    const errorMessage = {\r\n-      id: Date.now(),\r\n-      type: 'system',\r\n-      content: `Error: ${error.message}`,\r\n-      isError: true,\r\n-      timestamp: new Date()\r\n-    };\r\n-\r\n-    setMessages(prev => [...prev, errorMessage]);\r\n-  } finally {\r\n-    setIsProcessing(false);\r\n-  }\r\n-};\r\n   return (\r\n     <Card className=\"h-[600px] flex flex-col\">\r\n-      {/* Debug Panel */}\r\n-      <div className=\"bg-yellow-100 p-2 text-xs font-mono\">\r\n-        <div>Debug Info:</div>\r\n-        <pre className=\"whitespace-pre-wrap\">\r\n-          {JSON.stringify(debugInfo, null, 2)}\r\n-        </pre>\r\n-      </div>\r\n-\r\n       <div className=\"flex-1 overflow-y-auto p-4\">\r\n         <MessageList messages={messages} />\r\n         <div ref={chatEndRef} />\r\n       </div>\r\n \r\n-      <InputArea onSubmit={handleNewMessage} isProcessing={isProcessing} />\r\n+      <InputArea \r\n+        onSubmit={handleNewMessage}\r\n+        isProcessing={isProcessing}\r\n+      />\r\n     </Card>\r\n   );\r\n };\r\n \r\n-export default ChatInterface;\r\n+export default ChatInterface;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1730303356165,
            "name": "Commit-0",
            "content": "import React, { useState, useRef, useEffect } from 'react';\r\nimport Groq from \"groq-sdk\";\r\nimport { Card } from '@/components/ui/card';\r\nimport MessageList from './MessageList';\r\nimport InputArea from './InputArea';\r\n\r\n// Initialize Groq client\r\nconst groq = new Groq({\r\n  apiKey: process.env.NEXT_PUBLIC_GROQ_API_KEY, // Make sure to set this in your environment\r\n});\r\n\r\nconst ChatInterface = ({ energyData }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const chatEndRef = useRef(null);\r\n\r\n  // Auto-scroll to bottom when new messages arrive\r\n  useEffect(() => {\r\n    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  // Generate system prompt based on available data\r\n  const generateSystemPrompt = () => {\r\n    const dataRange = {\r\n      start: new Date(energyData[0].timestamp),\r\n      end: new Date(energyData[energyData.length - 1].timestamp)\r\n    };\r\n    \r\n    return `You are an energy analysis assistant. You help users understand their energy consumption patterns and provide insights.\r\n\r\nAvailable data range: ${dataRange.start.toLocaleDateString()} to ${dataRange.end.toLocaleDateString()}\r\nNumber of readings: ${energyData.length}\r\n\r\nCurrent energy data summary:\r\n${JSON.stringify(energyData.slice(0, 5), null, 2)}\r\n...and ${energyData.length - 5} more readings\r\n\r\nWhen analyzing the data, consider:\r\n1. Daily and weekly patterns\r\n2. Unusual spikes or drops\r\n3. Comparison with typical usage\r\n4. Potential energy-saving opportunities\r\n\r\nAlways provide specific numerical insights when relevant.`;\r\n  };\r\n\r\n  const handleNewMessage = async (message) => {\r\n    // Add user message\r\n    const userMessage = {\r\n      id: Date.now(),\r\n      type: 'user',\r\n      content: message,\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    setMessages(prev => [...prev, userMessage]);\r\n    setIsProcessing(true);\r\n\r\n    try {\r\n      // Format conversation history for the model\r\n      const formattedHistory = messages.map(msg => ({\r\n        role: msg.type === 'user' ? 'user' : 'assistant',\r\n        content: msg.content\r\n      }));\r\n\r\n      // Create completion request\r\n      const completion = await groq.chat.completions.create({\r\n        messages: [\r\n          {\r\n            role: \"system\",\r\n            content: generateSystemPrompt()\r\n          },\r\n          ...formattedHistory,\r\n          {\r\n            role: \"user\",\r\n            content: message\r\n          }\r\n        ],\r\n        model: \"mixtral-8x7b-32768\", // You can also try \"llama-3.1-70b-versatile\"\r\n        temperature: 0.7,\r\n        max_tokens: 1000,\r\n        top_p: 1,\r\n        stream: false\r\n      });\r\n\r\n      // Add system response\r\n      const systemMessage = {\r\n        id: Date.now(),\r\n        type: 'system',\r\n        content: completion.choices[0].message.content,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      setMessages(prev => [...prev, systemMessage]);\r\n\r\n    } catch (error) {\r\n      console.error('Error processing message with Groq:', error);\r\n      \r\n      // Add error message\r\n      const errorMessage = {\r\n        id: Date.now(),\r\n        type: 'system',\r\n        content: \"I'm sorry, I encountered an error while processing your request. Please try again.\",\r\n        isError: true,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"h-[600px] flex flex-col\">\r\n      <div className=\"flex-1 overflow-y-auto p-4\">\r\n        <MessageList messages={messages} />\r\n        <div ref={chatEndRef} />\r\n      </div>\r\n      <InputArea \r\n        onSubmit={handleNewMessage}\r\n        isProcessing={isProcessing}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ChatInterface;"
        }
    ]
}