{
    "sourceFile": "src/components/charts/EnergyChart.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1730291424705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730296814966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-# File: src/components/charts/EnergyChart.js\r\n \r\n import React from 'react';\r\n import {\r\n   LineChart,\r\n"
                },
                {
                    "date": 1730297974998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,75 +1,191 @@\n+# File: src/components/visualization/EnergyChart.js\r\n \r\n-import React from 'react';\r\n+import React, { useState } from 'react';\r\n import {\r\n   LineChart,\r\n   Line,\r\n+  BarChart,\r\n+  Bar,\r\n   XAxis,\r\n   YAxis,\r\n   Tooltip,\r\n+  Legend,\r\n   ResponsiveContainer,\r\n-  CartesianGrid\r\n+  CartesianGrid,\r\n } from 'recharts';\r\n-import { formatDate, formatTime } from '../../utils/dateUtils';\r\n+import { Card } from '../components/ui/card';\r\n \r\n-const EnergyChart = ({ data, isLoading, error }) => {\r\n-  if (isLoading) {\r\n-    return (\r\n-      <div className=\"h-64 flex items-center justify-center bg-gray-50 rounded-lg\">\r\n-        <p className=\"text-gray-500\">Loading data...</p>\r\n-      </div>\r\n-    );\r\n-  }\r\n+const EnergyChart = ({ \r\n+  data,\r\n+  type = 'line',\r\n+  height = 400,\r\n+  showControls = true,\r\n+  onTimeRangeChange\r\n+}) => {\r\n+  const [chartType, setChartType] = useState(type);\r\n+  const [timeRange, setTimeRange] = useState('24h');\r\n \r\n-  if (error) {\r\n-    return (\r\n-      <div className=\"h-64 flex items-center justify-center bg-red-50 rounded-lg\">\r\n-        <p className=\"text-red-500\">{error}</p>\r\n-      </div>\r\n-    );\r\n-  }\r\n+  const handleTimeRangeChange = (range) => {\r\n+    setTimeRange(range);\r\n+    if (onTimeRangeChange) {\r\n+      onTimeRangeChange(range);\r\n+    }\r\n+  };\r\n \r\n-  if (!data || data.length === 0) {\r\n-    return (\r\n-      <div className=\"h-64 flex items-center justify-center bg-gray-50 rounded-lg\">\r\n-        <p className=\"text-gray-500\">No data available</p>\r\n-      </div>\r\n-    );\r\n-  }\r\n+  // Format tooltip value\r\n+  const formatValue = (value) => {\r\n+    return `${value.toFixed(2)} kWh`;\r\n+  };\r\n \r\n+  // Format x-axis labels based on time range\r\n+  const formatXAxis = (timestamp) => {\r\n+    const date = new Date(timestamp);\r\n+    switch (timeRange) {\r\n+      case '24h':\r\n+        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n+      case '7d':\r\n+        return date.toLocaleDateString([], { weekday: 'short' });\r\n+      case '30d':\r\n+        return date.toLocaleDateString([], { month: 'short', day: 'numeric' });\r\n+      default:\r\n+        return date.toLocaleDateString();\r\n+    }\r\n+  };\r\n+\r\n   return (\r\n-    <div className=\"h-64 w-full\">\r\n-      <ResponsiveContainer>\r\n-        <LineChart data={data} margin={{ top: 5, right: 20, left: 10, bottom: 5 }}>\r\n-          <CartesianGrid strokeDasharray=\"3 3\" />\r\n-          <XAxis\r\n-            dataKey=\"timestamp\"\r\n-            tickFormatter={(timestamp) => formatTime(new Date(timestamp))}\r\n-            interval=\"preserveStartEnd\"\r\n-          />\r\n-          <YAxis\r\n-            label={{ \r\n-              value: 'Energy (kWh)', \r\n-              angle: -90, \r\n-              position: 'insideLeft',\r\n-              style: { textAnchor: 'middle' } \r\n-            }}\r\n-          />\r\n-          <Tooltip\r\n-            labelFormatter={(timestamp) => formatDate(new Date(timestamp))}\r\n-            formatter={(value) => [`${value.toFixed(2)} kWh`, 'Consumption']}\r\n-          />\r\n-          <Line\r\n-            type=\"monotone\"\r\n-            dataKey=\"consumption\"\r\n-            stroke=\"#2563eb\"\r\n-            strokeWidth={2}\r\n-            dot={false}\r\n-            activeDot={{ r: 4 }}\r\n-          />\r\n-        </LineChart>\r\n-      </ResponsiveContainer>\r\n-    </div>\r\n+    <Card className=\"p-4\">\r\n+      {showControls && (\r\n+        <div className=\"mb-4 flex justify-between items-center\">\r\n+          {/* Chart Type Controls */}\r\n+          <div className=\"flex space-x-2\">\r\n+            <button\r\n+              onClick={() => setChartType('line')}\r\n+              className={`px-3 py-1 rounded-md text-sm ${\r\n+                chartType === 'line'\r\n+                  ? 'bg-blue-100 text-blue-700'\r\n+                  : 'bg-gray-100 text-gray-600'\r\n+              }`}\r\n+            >\r\n+              Line\r\n+            </button>\r\n+            <button\r\n+              onClick={() => setChartType('bar')}\r\n+              className={`px-3 py-1 rounded-md text-sm ${\r\n+                chartType === 'bar'\r\n+                  ? 'bg-blue-100 text-blue-700'\r\n+                  : 'bg-gray-100 text-gray-600'\r\n+              }`}\r\n+            >\r\n+              Bar\r\n+            </button>\r\n+          </div>\r\n+\r\n+          {/* Time Range Controls */}\r\n+          <div className=\"flex space-x-2\">\r\n+            {['24h', '7d', '30d'].map((range) => (\r\n+              <button\r\n+                key={range}\r\n+                onClick={() => handleTimeRangeChange(range)}\r\n+                className={`px-3 py-1 rounded-md text-sm ${\r\n+                  timeRange === range\r\n+                    ? 'bg-blue-100 text-blue-700'\r\n+                    : 'bg-gray-100 text-gray-600'\r\n+                }`}\r\n+              >\r\n+                {range}\r\n+              </button>\r\n+            ))}\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+\r\n+      <div style={{ height: `${height}px` }}>\r\n+        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n+          {chartType === 'line' ? (\r\n+            <LineChart data={data}>\r\n+              <CartesianGrid strokeDasharray=\"3 3\" />\r\n+              <XAxis\r\n+                dataKey=\"timestamp\"\r\n+                tickFormatter={formatXAxis}\r\n+                interval=\"preserveStartEnd\"\r\n+              />\r\n+              <YAxis\r\n+                tickFormatter={formatValue}\r\n+                label={{ \r\n+                  value: 'Energy (kWh)',\r\n+                  angle: -90,\r\n+                  position: 'insideLeft',\r\n+                  style: { textAnchor: 'middle' }\r\n+                }}\r\n+              />\r\n+              <Tooltip\r\n+                formatter={(value) => formatValue(value)}\r\n+                labelFormatter={(label) => new Date(label).toLocaleString()}\r\n+              />\r\n+              <Legend />\r\n+              <Line\r\n+                type=\"monotone\"\r\n+                dataKey=\"consumption\"\r\n+                stroke=\"#2563eb\"\r\n+                strokeWidth={2}\r\n+                dot={false}\r\n+                activeDot={{ r: 4 }}\r\n+                name=\"Consumption\"\r\n+              />\r\n+              {data[0]?.baseline && (\r\n+                <Line\r\n+                  type=\"monotone\"\r\n+                  dataKey=\"baseline\"\r\n+                  stroke=\"#9ca3af\"\r\n+                  strokeWidth={2}\r\n+                  strokeDasharray=\"5 5\"\r\n+                  dot={false}\r\n+                  name=\"Baseline\"\r\n+                />\r\n+              )}\r\n+            </LineChart>\r\n+          ) : (\r\n+            <BarChart data={data}>\r\n+              <CartesianGrid strokeDasharray=\"3 3\" />\r\n+              <XAxis\r\n+                dataKey=\"timestamp\"\r\n+                tickFormatter={formatXAxis}\r\n+                interval=\"preserveStartEnd\"\r\n+              />\r\n+              <YAxis\r\n+                tickFormatter={formatValue}\r\n+                label={{ \r\n+                  value: 'Energy (kWh)',\r\n+                  angle: -90,\r\n+                  position: 'insideLeft',\r\n+                  style: { textAnchor: 'middle' }\r\n+                }}\r\n+              />\r\n+              <Tooltip\r\n+                formatter={(value) => formatValue(value)}\r\n+                labelFormatter={(label) => new Date(label).toLocaleString()}\r\n+              />\r\n+              <Legend />\r\n+              <Bar\r\n+                dataKey=\"consumption\"\r\n+                fill=\"#2563eb\"\r\n+                radius={[4, 4, 0, 0]}\r\n+                name=\"Consumption\"\r\n+              />\r\n+              {data[0]?.baseline && (\r\n+                <Bar\r\n+                  dataKey=\"baseline\"\r\n+                  fill=\"#9ca3af\"\r\n+                  radius={[4, 4, 0, 0]}\r\n+                  name=\"Baseline\"\r\n+                />\r\n+              )}\r\n+            </BarChart>\r\n+          )}\r\n+        </ResponsiveContainer>\r\n+      </div>\r\n+    </Card>\r\n   );\r\n };\r\n \r\n export default EnergyChart;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730299916648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-# File: src/components/visualization/EnergyChart.js\r\n \r\n import React, { useState } from 'react';\r\n import {\r\n   LineChart,\r\n"
                }
            ],
            "date": 1730291424705,
            "name": "Commit-0",
            "content": "# File: src/components/charts/EnergyChart.js\r\n\r\nimport React from 'react';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  CartesianGrid\r\n} from 'recharts';\r\nimport { formatDate, formatTime } from '../../utils/dateUtils';\r\n\r\nconst EnergyChart = ({ data, isLoading, error }) => {\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"h-64 flex items-center justify-center bg-gray-50 rounded-lg\">\r\n        <p className=\"text-gray-500\">Loading data...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"h-64 flex items-center justify-center bg-red-50 rounded-lg\">\r\n        <p className=\"text-red-500\">{error}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!data || data.length === 0) {\r\n    return (\r\n      <div className=\"h-64 flex items-center justify-center bg-gray-50 rounded-lg\">\r\n        <p className=\"text-gray-500\">No data available</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"h-64 w-full\">\r\n      <ResponsiveContainer>\r\n        <LineChart data={data} margin={{ top: 5, right: 20, left: 10, bottom: 5 }}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis\r\n            dataKey=\"timestamp\"\r\n            tickFormatter={(timestamp) => formatTime(new Date(timestamp))}\r\n            interval=\"preserveStartEnd\"\r\n          />\r\n          <YAxis\r\n            label={{ \r\n              value: 'Energy (kWh)', \r\n              angle: -90, \r\n              position: 'insideLeft',\r\n              style: { textAnchor: 'middle' } \r\n            }}\r\n          />\r\n          <Tooltip\r\n            labelFormatter={(timestamp) => formatDate(new Date(timestamp))}\r\n            formatter={(value) => [`${value.toFixed(2)} kWh`, 'Consumption']}\r\n          />\r\n          <Line\r\n            type=\"monotone\"\r\n            dataKey=\"consumption\"\r\n            stroke=\"#2563eb\"\r\n            strokeWidth={2}\r\n            dot={false}\r\n            activeDot={{ r: 4 }}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EnergyChart;"
        }
    ]
}